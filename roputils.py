from __future__ import annotations
from typing import Dict, Generator, List, Tuple, Set
# both above imports only for type hints

from copy import deepcopy
from random import randint

from parsebin import *
from capstone import *
from z3 import *

# NOTE: this file (currently) only implements functionality for x86_64 ELF files
# NOTE: any "address"-related keyword used does NOT take into accound ASLR / PIE

# retain the constants found during instruction analysis
# for optimising (yet to be implemented) automatic rop chain generator
_existent_constants = set()

# class that stores any kind of entity that can have a value
# eg. stack bytes, registers, register value "snapshot" at some point of execution, and so on
# the design choice of using such an ambiguous class 
# is based on the fact that the implementation is way easier to understand, to extend, or to modify
# compared to the situation in which every use case of this class would get its own class
class _structured_element:

    # dictionary of currently used structured elements types
    # {"ELEMENT_TYPE": [info param 1 type / info param 1 name, ...]}
    # NOTE: the fields described here only represent the keys of the self.info dict
    #       populating it with the corresponding (valid) values is the programmer's responsability
    ELEMENT_TYPES = {"64b_stack_val": ["id"],                           # integer value from the stack, indicated by an id
                        "ct_val": ["value"],                            # integer constant (non-stack / non-register) value

                        "reg_in": ["reg_name"],                         # register value at the beginning of a gadget / chain
                        "reg_out": ["reg_name"],                        # register value after executing a gadget / chain
                        
                        "add": ["r_independent", "term_1", "term_2"],   # arithmetic operations (can be recursive)
                        "sub": ["r_independent", "term_1", "term_2"],                       
                        "and": ["r_independent", "term_1", "term_2"],  
                        "or": ["r_independent", "term_1", "term_2"],  
                        "xor": ["r_independent", "term_1", "term_2"],  
                        "neg": ["r_independent", "term_1", "term_2"],   # for negation, term2 will always be None

                        "64b_stack_pad": []                             # marks padding (random value) for the stack view
                    }

                    # NOTE: regarding arithmetic element information:
                    #
                    #       r_independent (def)= a structuled element that does NOT contain 
                    #                               in its arithmetic operations recursion any element with type "reg_in" 
                    #
                    # it can be observed that r_independent arithmetic elements can only be obtained by chaining instructions
                    # because every arithmetic operation given by a single instruction 
                    # has at least a "reg_in" operand - that is, the destination register's initial value, before the operation
    
    @staticmethod
    def instantiate_structured_element(element_type: str):

        if element_type not in _structured_element.ELEMENT_TYPES.keys():
            raise RuntimeError(f"Cannot automatically instantiate _structured_element with type {element_type}")
        
        element = _structured_element(element_type)
        for info_field in _structured_element.ELEMENT_TYPES[element_type]:
            element.info.update({info_field: None})

        return element
    
    def __init__(self, element_type: str):
        self.type = element_type
        self.info = {}

    def is_op(self):
        return self.type in ["add", "sub", "and", "or", "xor", "neg"]

    # mostly for debugging purposes
    def __str__(self):
        info_s = {str(k): str(v) for k, v in self.info.items()}
        return f"element type {self.type}, info {info_s}"

# class to simulate the real stack on which a gadget or chain is executed
class _64b_stack_view:

    # retain all the stack elements id's and their value
    # INCLUDING THE RETURN ADDRESSES
    stack_values = {}

    # stack id to uniquely identify the (same) stack values
    # INCLUDING THE RETURN ADDRESSES
    stack_id_cnt = 0

    def __init__(self):
        self.elements: List[_structured_element] = []

    def push(self, element: _structured_element):
        self.elements.append(element)

    @staticmethod
    def get_elem_id():

        to_deliver = _64b_stack_view.stack_id_cnt

        _64b_stack_view.stack_id_cnt += 1
        _64b_stack_view.stack_values.update({to_deliver: None})
        
        return to_deliver

    # returns a joined stack
    # does NOT deepcopy
    @staticmethod
    def join_stacks(fst: _64b_stack_view, snd: _64b_stack_view):

        res = _64b_stack_view()
        res.elements = fst.elements + snd.elements
        return res
            
    # mostly for debugging purposes
    def __str__(self):
        return f"stack view with elements {[str(el) for el in self.elements]}"

# class to store the semantics of all the gadgets
# again, some ambiguity is intentionally provided, for same reasoning as the above mentioned classes
# but it has some constrains:
#   * every effect has an id that should be part of an implementation convention
#   * the effect, if seen as an operation, stores the result value in a single destination element (currently, by convention, only registers)
class _effect:

    # if true, arith match is done by thecking operation trees, method invariant only to commutativity
    #           no false positives, lots of false negatives, 
    # if false, arith match is done by giving random inputs to registers,
    #           and eventually tring to adjust the checked effect stack values to match
    #           some false positives, no false negatives
    ARITH_EXACT_MATCH = False

    # indicates the number of (random) tests to be done
    # ignored if ARITH_EXACT_MATCH is True
    ARITH_P_TEST_CNT = 30

    # RSP not included, treated only in some particular cases
    SUPPORTED_REGS = ["rax", "rbx", "rcx", "rdx", "rsi", "rdi", "rbp",
                        "r8", "r9", "r10", "r11", "r12", "r13", "r14", "r15"]

    # dictionary of currently used effect types
    # {"EFFECT_TYPE": (destination_element type, [param1 type, ...]), ...}
    # NOTE: ARITH type has parameter type configurable: "<op>"
    EFFECT_TYPES = {"LOAD_S": ("reg_out", ["64b_stack_val"]),       # load value in register from the stack (RSP value increase NOT included)
                    "LOAD_CT": ("reg_out", ["ct_val"]),             # load value that is constant (that does not originate from registers or stack)
                    "MOV_RR": ("reg_out", ["reg_in"]),              # copying value from one register to another
                    "ARITH": ("reg_out", []),                       # operations (add, sub, bitewise operations, etc) - the PARAMS are not included
                    "ADD_RSP": (None, ["ct_val"]),                  # separate effect indicating incrementing RSP (with a constant value only)
                    "NO_OP": (None, [])                             # no operation
                    }

    @staticmethod
    def instantiate_effect(effect_type: str):
     
        if effect_type not in _effect.EFFECT_TYPES.keys():
            raise RuntimeError(f"Cannot automatically instantiate _effect with type {effect_type}")

        effect = _effect(effect_type, None, [])

        dest_type, param_type_list = _effect.EFFECT_TYPES[effect_type]

        if dest_type is not None:
            effect.destination_element = _structured_element.instantiate_structured_element(dest_type)
        
        for param_type in param_type_list:
            effect.params.append(_structured_element.instantiate_structured_element(param_type))

        return effect

    # common code lines between any location (at least when interpreting instructions)
    # for creating an effect that marks an arithmetic operation with a constant
    # NOTE: no checks are done
    @staticmethod
    def make_arith_ct_effect(op_type: str, dest_reg_name: str, constant: int):

        arith_op_ct_effect = _effect.instantiate_effect("ARITH")
        arith_op_ct_effect.destination_element.info["reg_name"] = dest_reg_name

        arith_op_ct_effect.params.append(_structured_element.instantiate_structured_element(op_type))
        arith_op_ct_effect.params[0].info["r_independent"] = False

        arith_op_ct_effect.params[0].info["term_1"] =  _structured_element.instantiate_structured_element("reg_in")
        arith_op_ct_effect.params[0].info["term_2"] =  _structured_element.instantiate_structured_element("ct_val")
        arith_op_ct_effect.params[0].info["term_1"].info["reg_name"] = dest_reg_name
        arith_op_ct_effect.params[0].info["term_2"].info["value"] = constant

        _existent_constants.add(constant)

        return arith_op_ct_effect

    # same as make_arith_ct_effect but for operations with (only) registers
    # NOTE: no checks are done
    @staticmethod
    def make_arith_reg_effect(op_type: str, dest_reg_name: str, src_reg_name: str):

        arith_op_reg_effect = _effect.instantiate_effect("ARITH")
        arith_op_reg_effect.destination_element.info["reg_name"] = dest_reg_name

        arith_op_reg_effect.params.append(_structured_element.instantiate_structured_element(op_type))
        arith_op_reg_effect.params[0].info["r_independent"] = False

        arith_op_reg_effect.params[0].info["term_1"] =  _structured_element.instantiate_structured_element("reg_in")
        arith_op_reg_effect.params[0].info["term_2"] =  _structured_element.instantiate_structured_element("reg_in")
        arith_op_reg_effect.params[0].info["term_1"].info["reg_name"] = dest_reg_name
        arith_op_reg_effect.params[0].info["term_2"].info["reg_name"] = src_reg_name

        return arith_op_reg_effect

    @staticmethod
    def make_load_ct_effect(dest_reg_name: str, constant: int):

        load_ct_effect = _effect.instantiate_effect("LOAD_CT")
        load_ct_effect.destination_element.info["reg_name"] = dest_reg_name
        load_ct_effect.params[0].info["value"] = constant

        _existent_constants.add(constant)

        return load_ct_effect

    @staticmethod
    def make_load_s_effect(dest_reg_name: str):

        load_s_effect = _effect.instantiate_effect("LOAD_S")
        load_s_effect.destination_element.info["reg_name"] = dest_reg_name
        load_s_effect.params[0].info["id"] = _64b_stack_view.get_elem_id()

        return load_s_effect

    @staticmethod
    def make_mov_rr_effect(dest_reg_name: str, src_reg_name: str):

        mov_rr_effect = _effect.instantiate_effect("MOV_RR")
        mov_rr_effect.destination_element.info["reg_name"] = dest_reg_name
        mov_rr_effect.params[0].info["reg_name"] = src_reg_name

        return mov_rr_effect

    @staticmethod
    def make_neg_effect(dest_reg_name: str):

        arith_neg_effect = _effect.instantiate_effect("ARITH")
        arith_neg_effect.destination_element.info["reg_name"] = dest_reg_name

        arith_neg_effect.params.append(_structured_element.instantiate_structured_element("neg"))
        arith_neg_effect.params[0].info["r_independent"] = False

        arith_neg_effect.params[0].info["term_1"] =  _structured_element.instantiate_structured_element("reg_in")
        arith_neg_effect.params[0].info["term_1"].info["reg_name"] = dest_reg_name

        return arith_neg_effect

    @staticmethod
    def make_add_rsp_effect(constant: int):

        add_rsp_effect = _effect.instantiate_effect("ADD_RSP")
        add_rsp_effect.params[0].info["value"] = constant

        # this constant is NOT added into known constants cache
        # because is limited in interacting only with RSP

        return add_rsp_effect

    def __init__(self, effect_type: str, destination_element: _structured_element, params: List[_structured_element]):

        self.type: str = effect_type
        self.destination_element: _structured_element = destination_element
        self.params: List[_structured_element] = params

    # currently uses Z3: https://github.com/Z3Prover/z3
    def _match_arith(self, checked_ef: _effect):

        if self.destination_element.info["reg_name"] != checked_ef.destination_element.info["reg_name"]:
            return False

        # possible type pairs (wanted_ef, checked_ef):
        # ARITH, ARITH
        # MOV_RR, ARITH
        # LOAD_CT, ARITH
        # NOTE: if the wanted effect is of type ARITH, it is assumed it does NOT contain stack elements

        # match the operation trees, taking into account only commutativity of some operations
        def _tree_match(wanted_ef: _structured_element, checked_ef: _structured_element):

            if (wanted_ef is None) and (checked_ef is None):
                return True

            if wanted_ef.type != checked_ef.type:
                return False
            
            if wanted_ef.type == "64b_stack_val":

                if (_64b_stack_view.stack_values[checked_ef.info["id"]] == _64b_stack_view.stack_values[wanted_ef.info["id"]]) \
                    or (_64b_stack_view.stack_values[checked_ef.info["id"]] is None):

                    if checked_ef.info["id"] != wanted_ef.info["id"]:

                        val = _64b_stack_view.stack_values[wanted_ef.info["id"]]
                        _64b_stack_view.stack_values.pop(wanted_ef.info["id"])
                        
                        wanted_ef.info["id"] = checked_ef.info["id"]
                        _64b_stack_view.stack_values[checked_ef.info["id"]] = val

                    return True

                else:
                    return False

            if wanted_ef.type == "reg_in":
                return wanted_ef.info["reg_name"] == checked_ef.info["reg_name"]

            if wanted_ef.type == "ct_val":
                return wanted_ef.info["value"] == checked_ef.info["value"]

            if wanted_ef.type in ["sub", "neg"]:
                return _tree_match(wanted_ef.info["term_1"], checked_ef.info["term_1"]) and _tree_match(wanted_ef.info["term_2"], checked_ef.info["term_2"])

            if wanted_ef.is_op():
                return (_tree_match(wanted_ef.info["term_1"], checked_ef.info["term_1"]) and _tree_match(wanted_ef.info["term_2"], checked_ef.info["term_2"])) or\
                        (_tree_match(wanted_ef.info["term_2"], checked_ef.info["term_1"]) and _tree_match(wanted_ef.info["term_1"], checked_ef.info["term_2"]))

            raise RuntimeError(f"trying to match trees with unknown types: {wanted_ef.type}")

        # probabilistic match
        def _probabilistic_match(wanted_ef: _effect, checked_ef: _effect):

            stack_ids = set()
            reg_in_elements = {}

            # in case of stack assignments, z3 solver is used
            z3_solver = z3.Solver()
            
            # simulates the execution of the arith effect
            def _simulate(op_element: _structured_element, local_stack_values: Dict[int, int], reg_start_values: Dict[str, int]):
        
                if op_element.type == "64b_stack_val":
                    return local_stack_values[op_element.info["id"]]

                if op_element.type == "ct_val":
                    return op_element.info["value"]

                if op_element.type == "reg_in":
                    return reg_start_values[op_element.info["reg_name"]]

                if op_element.type == "add":
                    return _simulate(op_element.info["term_1"], local_stack_values, reg_start_values) +\
                            _simulate(op_element.info["term_2"], local_stack_values, reg_start_values)
                
                if op_element.type == "sub":
                    return _simulate(op_element.info["term_1"], local_stack_values, reg_start_values) -\
                            _simulate(op_element.info["term_2"], local_stack_values, reg_start_values)

                if op_element.type == "and":
                    return _simulate(op_element.info["term_1"], local_stack_values, reg_start_values) &\
                            _simulate(op_element.info["term_2"], local_stack_values, reg_start_values)

                if op_element.type == "or":
                    return _simulate(op_element.info["term_1"], local_stack_values, reg_start_values) |\
                            _simulate(op_element.info["term_2"], local_stack_values, reg_start_values)

                if op_element.type == "xor":
                    return _simulate(op_element.info["term_1"], local_stack_values, reg_start_values) ^\
                            _simulate(op_element.info["term_2"], local_stack_values, reg_start_values)

                if op_element.type == "neg":
                    return ~(_simulate(op_element.info["term_1"], local_stack_values, reg_start_values))

            # function that folds over the ARITH expression tree 
            # and updates the z3 solver
            _aux_id = 0
            def _convert_to_z3_expr(el: _structured_element):
                
                nonlocal _aux_id

                if el.type == "64b_stack_val":

                    val = _64b_stack_view.stack_values[el.info["id"]]
                    if val is not None:

                        conv_el = BitVec(f"c{_aux_id}", 64)
                        z3_solver.add(conv_el == val)

                        return conv_el
                    
                    else:
                        return BitVec(f"stack{el.info['id']}", 64)

                else:

                    conv_el = BitVec(f"c{_aux_id}", 64)
                    _aux_id += 1
                    
                    if el.type == "ct_val":
                        z3_solver.add(conv_el == el.info["value"])

                    elif el.type == "reg_in":
                        z3_solver.add(conv_el == reg_in_elements[el.info["reg_name"]])

                    elif el.type == "neg":
                        
                        t = _convert_to_z3_expr(el.info["term_1"])
                        z3_solver.add(conv_el == ~t)

                    elif el.is_op():

                        t1 = _convert_to_z3_expr(el.info["term_1"])
                        t2 = _convert_to_z3_expr(el.info["term_2"])

                        if el.type == "add":
                            z3_solver.add(conv_el == t1 + t2)

                        elif el.type == "sub":
                            z3_solver.add(conv_el == t1 - t2)

                        elif el.type == "and":
                            z3_solver.add(conv_el == t1 & t2)

                        elif el.type == "or":
                            z3_solver.add(conv_el == t1 | t2)

                        elif el.type == "xor":
                            z3_solver.add(conv_el == t1 ^ t2)

                    return conv_el

            # method that determines whether the checked expression has unassigned stack elements or not
            # and if it has, initialize them as keys in the stack_elements_assignments dictionary
            # also, it retains the reg_in elements used
            def _check_stack_elements(el: _structured_element):

                if el is None:
                    return False

                if el.type == "64b_stack_val":
                    
                    if _64b_stack_view.stack_values[el.info["id"]] is None:

                        stack_ids.add(el.info["id"])
                        return True

                    return False

                elif el.type == "reg_in":

                    reg_in_elements.update({el.info["reg_name"]: None})
                    return False

                elif el.type == "ct_val":
                    return False

                elif el.is_op():

                    checked_1 = _check_stack_elements(el.info["term_1"])
                    checked_2 = _check_stack_elements(el.info["term_2"])

                    return checked_1 or checked_2

                raise RuntimeError(f"unknown element type {el.type} when trying to match arith")

            stack_elements_found_inwanted = _check_stack_elements(wanted_ef.params[0])
            if stack_elements_found_inwanted is True:
                raise RuntimeError("stack element found in wanted effect")

            stack_elements_found = _check_stack_elements(checked_ef.params[0])

            for _ in range(_effect.ARITH_P_TEST_CNT):

                for reg_in in reg_in_elements.keys():
                    reg_in_elements[reg_in] = randint(0, 2 ** 64)

                wanted_ef_val = 0

                if wanted_ef.type == "MOV_RR":
                    wanted_ef_val = reg_in_elements[wanted_ef.params[0].info["reg_name"]]

                elif wanted_ef.type == "LOAD_CT":
                    wanted_ef_val = wanted_ef.params[0].info["value"]

                elif wanted_ef.type == "ARITH":
                    wanted_ef_val = _simulate(wanted_ef.params[0], _64b_stack_view.stack_values, reg_in_elements)

                # the checked_ef has no stack id to be assigned a value, only to compute the result based on reg_in values
                if stack_elements_found is False:

                    checked_ef_val = _simulate(checked_ef.params[0], _64b_stack_view.stack_values, reg_in_elements)
                    if checked_ef_val != wanted_ef_val:
                        return False

                else:
                    # there are unknown stack values that need to be assigned a value
                    # before proceeding in checking the matching

                    z3_expr = _convert_to_z3_expr(checked_ef.params[0])
                    z3_solver.add(z3_expr == wanted_ef_val)

            # checking for stack element possible assignments 
            # so that checked_ef matches wanted_ef
            if stack_elements_found is True:

                if z3_solver.check() == z3.sat:

                    sm = z3_solver.model()
                    for stack_elem_id in stack_ids:

                        z3_stack_elem = BitVec(f"stack{stack_elem_id}", 64)
                        val = sm[z3_stack_elem]

                        if val is not None:
                            _64b_stack_view.stack_values[stack_elem_id] = val.as_long()
                        else:
                            # irrelevant element, add some padding
                            _64b_stack_view.stack_values[stack_elem_id] = int.from_bytes(b'A' * 8, 'little')

                else:
                    return False

            return True
        
        if _effect.ARITH_EXACT_MATCH is True:
            return _tree_match(self, checked_ef)
        else:
            return _probabilistic_match(self, checked_ef)

    # function that matches two effects
    # also responsible for matching ARITH expressions
    # for LOAD_S, LOAD_CT, MOV_RR, an exact match is needed to return True
    # for ARITH effects, there can be an exact match search
    # or a probabilistic one, if opted for (it calculates the operations)
    # NOTE: when matching with LOAD_S effects, self stack element ID is changed
    def match(self, g_effect: _effect):

        if self.destination_element.info["reg_name"] != g_effect.destination_element.info["reg_name"]:
            return False

        if self.type == "ARITH" or g_effect.type == "ARITH":
            return self._match_arith(g_effect)
        
        # LOAD_S is intentionally restricted to only other LOAD_S effects, for an efficient/ fast search
        # if one wants to have all the possible ways of loading a value in a register, LOAD_CT matching should be chosen instead
        if self.type == "LOAD_S":
            
            if g_effect.type != "LOAD_S":
                return False
            
            # either the wanted effect has the same value as the stack element (none or int value)
            # or the vanted effect has a concrete value and the stack element is none, case in which stack value is assigned the wanted one
            # or both the stack and the wanted elements have non-none values, but are different, case in which it fails
            # in any case it succeeds, the wanted value id becomes the stack id
            if (_64b_stack_view.stack_values[g_effect.params[0].info["id"]] == _64b_stack_view.stack_values[self.params[0].info["id"]]) \
                or (_64b_stack_view.stack_values[g_effect.params[0].info["id"]] is None):

                if g_effect.params[0].info["id"] != self.params[0].info["id"]:

                    val = _64b_stack_view.stack_values[self.params[0].info["id"]]
                    _64b_stack_view.stack_values.pop(self.params[0].info["id"])

                    self.params[0].info["id"] = g_effect.params[0].info["id"]
                    _64b_stack_view.stack_values[g_effect.params[0].info["id"]] = val

                return True

            else:
                return False

        elif self.type == "LOAD_CT":
            
            if g_effect.type == "LOAD_CT":

                if g_effect.params[0].info["value"] != self.params[0].info["value"]:
                    return False
                return True

            elif g_effect.type == "LOAD_S":

                if (_64b_stack_view.stack_values[g_effect.params[0].info["id"]] == self.params[0].info["value"]) \
                    or (_64b_stack_view.stack_values[g_effect.params[0].info["id"]] is None):

                    _64b_stack_view.stack_values[g_effect.params[0].info["id"]] = self.params[0].info["value"]
                    return True
            
                return False

            return False

        elif self.type == "MOV_RR":
            
            if g_effect.type == "MOV_RR":

                if self.params[0].info["reg_name"] != g_effect.params[0].info["reg_name"]:
                    return False
                return True

            return False

        raise RuntimeError(f"trying to match types {self.type}, {g_effect.type}")

    # actualize the r_independent property value
    # ONLY for ARITH type effects
    def r_independent_check(self):

        def _check(element: _structured_element):
            
            if element.type == "reg_in":
                return False

            if element.type in ["64b_stack_val", "ct_val"]:
                return True

            if element.is_op():

                r_independent = True

                if element.info["term_1"] is not None:

                    rec_r_indep = _check(element.info["term_1"])
                    r_independent &= rec_r_indep

                if element.info["term_2"] is not None:

                    rec_r_indep = _check(element.info["term_2"])
                    r_independent &= rec_r_indep

                element.info["r_independent"] = r_independent
                return r_independent

        if self.type != "ARITH":
            raise RuntimeError("method called on non-ARITH type effect")

        _check(self.params[0])

    # tries to "simplify" effects in a few ways:
    # 1) if given, reg start values and fixed stack values are "plugged in" and (eventually) converted into constants
    # 2) tries to solve the ARITH operations tree, computing constant-only operations
    # 
    # when reg start values and fixed stack values (ids) are not given, this method can be called anywhere safely
    # the reg start values / fixed stack values should only be used when working with temporary gadgets / chains,
    # as the effects are irreversible (the constants cannot be reverted back to reg_in elements or stack elements)
    #
    # it can also save the newly calculated constants into a set given as argument to the function (save_ct_into)
    # that is not necessarily the global _existent_constants set (!!! unsure if this functionality will be used !!!)
    def simplify(self, use_r_independent_prop = False, fixed_stack_val_ids: List[int] = [], fix_every_stack_val = False, 
                    reg_start_val: Dict[str, _structured_element] = {}, save_ct_into: set = None):

        def _get_val(element: _structured_element) -> _structured_element | int:

            if element is None:
                return None

            if element.type == "ct_val":
                return element.info["value"]

            if element.type == "64b_stack_val" and (element.info["id"] in fixed_stack_val_ids or (fix_every_stack_val is True)):
                return _64b_stack_view.stack_values[element.info["id"]]

            if element.type == "reg_in":
                if element.info["reg_name"] in reg_start_val.keys():
                    return reg_start_val[element.info["reg_name"]]

            return None
    
        def _simplify_arith(el: _structured_element):

            if el.type == "64b_stack_val":

                val = _get_val(el)
                if val is not None:

                    el.type = "ct_val"
                    el.info = {"value": val}

                    return val

            elif el.type == "reg_in":
                
                val = _get_val(el)
                if val is not None:
                    
                    if val.type == "ct_val":

                        el.type = "ct_val"
                        el.info = {"value": val.info["value"]}
                      
                        return val.info["value"]

                    elif val.type == "reg_in":
                        el.info["reg_name"] = val.info["reg_name"]

                    elif val.is_op():
                        
                        el.type = val.type
                        el.info = deepcopy(val.info)

            elif el.type == "ct_val":
                return el.info["value"]

            elif el.is_op():

                if (use_r_independent_prop is True) and (el.info["r_independent"] is False):
                    return None
                
                term_1: _structured_element = el.info["term_1"]
                term_2: _structured_element = el.info["term_2"]

                term_1_val = None
                term_2_val = None

                if term_1 is not None:
                    term_1_val = _simplify_arith(term_1)

                if term_2 is not None:
                    term_2_val = _simplify_arith(term_2)

                new_ct = None
                
                if el.type == "add" and (term_1_val is not None) and (term_2_val is not None):
                    
                    el.type = "ct_val"
                    el.info = {"value": term_1_val + term_2_val}
                    new_ct = term_1_val + term_2_val

                elif el.type == "sub" and (term_1_val is not None) and (term_2_val is not None):
                    
                    el.type = "ct_val"
                    el.info = {"value": term_1_val - term_2_val}
                    new_ct = term_1_val - term_2_val

                elif el.type == "and" and (term_1_val is not None) and (term_2_val is not None):
                    
                    el.type = "ct_val"
                    el.info = {"value": term_1_val & term_2_val}
                    new_ct = term_1_val & term_2_val

                elif el.type == "or" and (term_1_val is not None) and (term_2_val is not None):
                    
                    el.type = "ct_val"
                    el.info = {"value": term_1_val | term_2_val}
                    new_ct = term_1_val | term_2_val

                elif el.type == "xor" and (term_1_val is not None) and (term_2_val is not None):
                    
                    el.type = "ct_val"
                    el.info = {"value": term_1_val ^ term_2_val}
                    new_ct = term_1_val ^ term_2_val

                elif el.type == "neg" and (term_1_val is not None):
                    
                    el.type = "ct_val"
                    el.info = {"value": ~term_1_val}
                    new_ct = ~term_1_val

                if new_ct is not None: 

                    if save_ct_into is not None:
                        save_ct_into.add(new_ct)

                    return new_ct

            return None

        if self.type == "ARITH":

            _simplify_arith(self.params[0])

            if self.params[0].type == "reg_in":
                self.type = "MOV_RR"

            elif self.params[0].type == "ct_val":
                self.type = "LOAD_CT"

            elif self.params[0].type == "64b_stack_val":
                self.type = "LOAD_S"
                
        elif self.type == "MOV_RR":
            
            reg_in_val = _get_val(self.params[0])
            if reg_in_val is not None:

                if reg_in_val.type == "ct_val":

                    self.type = "LOAD_CT"
                    self.params[0] = _structured_element.instantiate_structured_element("ct_val")
                    self.params[0].info["value"] = reg_in_val

                    if save_ct_into is not None:
                        save_ct_into.add(reg_in_val)

                elif reg_in_val.type == "reg_in":
                    self.params[0].info["reg_name"] = reg_in_val.info["reg_name"]

                elif reg_in_val.is_op():

                    self.type = "ARITH"
                    self.params[0] = deepcopy(reg_in_val)

        elif self.type == "LOAD_S":
            
            stack_val = _get_val(self.params[0])
            if stack_val is not None:

                self.type = "LOAD_CT"
                self.params[0] = _structured_element.instantiate_structured_element("ct_val")
                self.params[0].info["value"] = stack_val

                if save_ct_into is not None:
                    save_ct_into.add(stack_val)
    
    # method that converts each dissasembled instruction provided by Capstone into effects
    # it is also responsible for checking the validity of the instruction
    @staticmethod
    def analyse_instr(instr: CsInsn):
        
        # function to check whether a string is a number in base 10 or 16, and, if true, to return it
        def _is_int(to_check: str):
            
            failed_conversion = 0
            int_conversion = 0

            try:
                int_conversion = int(to_check, 10)
            except Exception:
                failed_conversion += 1

            if failed_conversion == 1:
                try:
                    int_conversion = int(to_check, 16)
                except Exception:
                    failed_conversion += 1

            if failed_conversion == 2:
                return None

            return int_conversion

        # separate the arguments from instr.op_str
        def _get_2_args(op_str: str):

            mov_args = op_str.split(",")
                
            if len(mov_args) != 2:
                return None, None

            dest = mov_args[0].strip()
            src = mov_args[1].strip()

            return dest, src

        # checks whether the instruction effects 
        # are ignored (from the point of view of this algorithm)
        # and are treated as NOP
        # TODO: ignore (most of) SSE/AVX operations
        def _ignored_instr(instr: CsInsn):

            # some ignored instructions
            IGNORED_INSTR_MNEMONICS = ["endbr64", "clc", "cld", "cldemote", "clflush", "clflushopt", 
                                        "cli", "clts", "clwb", "cmc", "fnop", "vzeroupper"]

            if instr.mnemonic in IGNORED_INSTR_MNEMONICS:
                return True

            return False

        try:

            instr_effects = []

            mnemonic = instr.mnemonic

            if mnemonic == "pop":

                if instr.op_str not in _effect.SUPPORTED_REGS:
                    return None

                load_s_effect = _effect.make_load_s_effect(instr.op_str)
                add_rsp_effect = _effect.make_add_rsp_effect(8)

                instr_effects.append(load_s_effect)
                instr_effects.append(add_rsp_effect)

            elif mnemonic == "mov":
                
                dest, src = _get_2_args(instr.op_str)

                if dest not in _effect.SUPPORTED_REGS:
                    return None

                # TODO: add mov r, rsp support
                # TODO: add 32b / 16b registers support (at least for some cases)

                if src not in _effect.SUPPORTED_REGS:

                    int_src = _is_int(src)
                    if int_src is None:
                        
                        if src == "qword ptr [rsp]":
                            load_s_effect = _effect.make_load_s_effect(dest)
                            instr_effects.append(load_s_effect)
                        else:
                            return None
                    else:
                        load_ct_effect = _effect.make_load_ct_effect(dest, int_src)
                        instr_effects.append(load_ct_effect)

                else:
                    mov_rr_effect = _effect.make_mov_rr_effect(dest, src)
                    instr_effects.append(mov_rr_effect)

            elif mnemonic == "xchg":

                r1, r2 = _get_2_args(instr.op_str)

                if (r1 not in _effect.SUPPORTED_REGS) or (r2 not in _effect.SUPPORTED_REGS):
                    return None

                if r1 == r2:

                    nop_effect = _effect.instantiate_effect("NO_OP")
                    instr_effects.append(nop_effect)

                else:
                
                    mov_rr_effect1 = _effect.make_mov_rr_effect(r1, r2)
                    mov_rr_effect2 = _effect.make_mov_rr_effect(r2, r1)

                    instr_effects.append(mov_rr_effect1)
                    instr_effects.append(mov_rr_effect2)

            elif mnemonic in ["add", "sub"]:

                dest, src = _get_2_args(instr.op_str)

                if (dest not in _effect.SUPPORTED_REGS) and (dest != "rsp"):
                    return None

                if dest == "rsp":

                    if mnemonic != "add":
                        return None

                    int_src = _is_int(src)

                    if (int_src is None) or (int_src % 8 != 0):
                        return None

                    add_rsp_effect = _effect.make_add_rsp_effect(int_src)
                    instr_effects.append(add_rsp_effect)

                elif src in _effect.SUPPORTED_REGS:
                    
                    arith_add_reg_effect = _effect.make_arith_reg_effect(mnemonic, dest, src)
                    instr_effects.append(arith_add_reg_effect)
                    
                else:
                    
                    int_src = _is_int(src)

                    if int_src is None:
                        return None

                    op_type = "add"
                    if (int_src < 0 and mnemonic == "add") or (int_src >= 0 and mnemonic == "sub"):
                        op_type = "sub"

                    arith_add_ct_effect = _effect.make_arith_ct_effect(op_type, dest, int_src)
                    instr_effects.append(arith_add_ct_effect)

            elif mnemonic in ["dec", "inc"]:
                
                dest = instr.op_str

                if dest not in _effect.SUPPORTED_REGS:
                    return None

                op_type = "sub"
                if mnemonic == "inc":
                    op_type = "add"

                arith_1_effect = _effect.make_arith_ct_effect(op_type, dest, 1)
                instr_effects.append(arith_1_effect)

            elif mnemonic == "neg":
                
                if instr.op_str not in _effect.SUPPORTED_REGS:
                    return None

                arith_neg_effect = _effect.make_neg_effect(instr.op_str)
                instr_effects.append(arith_neg_effect)

            elif mnemonic in ["and", "or", "xor"]:
                
                dest, src = _get_2_args(instr.op_str)

                if dest not in _effect.SUPPORTED_REGS:
                    return None

                if src not in _effect.SUPPORTED_REGS:

                    int_src = _is_int(src)

                    if int_src is None:
                        return None
                    
                    arith_bitwise_ct_effect = _effect.make_arith_ct_effect(mnemonic, dest, int_src)
                    instr_effects.append(arith_bitwise_ct_effect)

                else:
                    # particular case xor r, r <=> mov r, 0
                    if dest == src:

                        load_0_effect = _effect.make_load_ct_effect(dest, 0)
                        instr_effects.append(load_0_effect)

                    else:
                        arith_bitwise_reg_effect = _effect.make_arith_reg_effect(mnemonic, dest, src)
                        instr_effects.append(arith_bitwise_reg_effect)
                    
            elif mnemonic == "nop" or _ignored_instr(instr):
                
                nop_effect = _effect.instantiate_effect("NO_OP")
                instr_effects.append(nop_effect)

            else:
                return None

            return instr_effects          

        except Exception:
            return None

    # method responsible for creating a gadget from separate (but ordered) instruction effects
    # the joining should resemble joining effects when building (yet to be implemented) rop chains from gadgets
    @staticmethod
    def join_instr_effects(ordered_effects: List[List[_effect]]):
        
        # depth-first exploration of <op>-type _structured_element arithmetic tree
        # yielding every _structured_element of type "reg_in"
        def _recursive_arith_exploration(element: _structured_element):
        
            if element.type == "reg_in":
                yield element

            elif element.is_op():
                
                if element.info["term_1"] is not None:
                    for reg_in_elem in _recursive_arith_exploration(element.info["term_1"]):
                        yield reg_in_elem

                if element.info["term_2"] is not None:
                    for reg_in_elem in _recursive_arith_exploration(element.info["term_2"]):
                        yield reg_in_elem
        
        # eliminate from the joined list effects such as NO_OP or "move r_i, r_i"
        def _ignored_effect(ef: _effect):

            if ef.type == "ARITH":

                ef.r_independent_check()
                ef.simplify(use_r_independent_prop=True, fixed_stack_val_ids=[], fix_every_stack_val=False, 
                            reg_start_val={}, save_ct_into = _existent_constants)

            if ef.type in ["NO_OP", "ADD_RSP"]:
                return True

            if ef.type == "MOV_RR" and ef.destination_element.info["reg_name"] == ef.params[0].info["reg_name"]:
                return True

            return False

        if len(ordered_effects) == 0:
            return None

        # position of rsp in the stack view, considering 64 bit elements (real rsp byte offset = rsp_pos * 8 bytes)
        rsp_pos = 0
        acc_effects: List[_effect] = []
        acc_stack = _64b_stack_view()

        # the joining (currently) has 7 steps
        #
        #   1) initialize the joined effects list with the second effects list
        #   2) update the stack by analysing LOAD_S and ADD_RSP effects
        #   3) for every instruction in the joined effects list, 
        #       replace every "reg_in" with the corresponding "reg_out" from the first effects list
        #   4) copy every effect from the first effects list into the joined effects list, that has the destination reg
        #       different from any other destination reg from the joined effects list,
        #       and also skip NO_OP and ADD_RSP effects
        #   5) (optionally) iterate over all effects from the joined effects list and filter them
        #       so that effects of type move ri, ri are eliminated, or for simplifying arithmetic effects
        #   6) the first effects list is assigned the newly created joined effects list, and the loop continues 
        #       until all effect lists are processed
        #   7) a new gadget is created with the final effects list and the obtained stack, some validity constraints are imposed
        #       and, optionally, other optimizations

        # NOTE: no two effects from a single effect list contain the same destination register
        #       proof by induction: base case assured by the analyse_instr, 
        #                           induction step proven by the rest of the current algorithm's steps

        for i in range(len(ordered_effects)):
            
            # step 1)
            new_acc_effect_list = deepcopy(ordered_effects[i])

            # step 2)
            for ef in new_acc_effect_list:

                if ef.type == "LOAD_S":
                    
                    if rsp_pos == len(acc_stack.elements):

                        acc_stack.push(_structured_element.instantiate_structured_element("64b_stack_val"))
                        acc_stack.elements[rsp_pos].info["id"] = ef.params[0].info["id"]

                    else:
                        ef.params[0].info["id"] = acc_stack.elements[rsp_pos].info["id"]

                elif ef.type == "ADD_RSP":
                    
                    inc_pos_cnt = ef.params[0].info["value"] // 8

                    while inc_pos_cnt > 0:

                        if rsp_pos == len(acc_stack.elements):
                            acc_stack.push(_structured_element.instantiate_structured_element("64b_stack_pad"))

                        rsp_pos += 1
                        inc_pos_cnt -= 1

            # step 3)
            for ef in new_acc_effect_list:

                if ef.type == "MOV_RR":
                    
                    reg_in_name = ef.params[0].info["reg_name"]

                    corresp_before_ef = None
                    for before_ef in acc_effects:

                        if before_ef.destination_element.info["reg_name"] == reg_in_name:
                            corresp_before_ef = before_ef
                            break

                    if corresp_before_ef is not None:
                        
                        if corresp_before_ef.type == "MOV_RR":
                            ef.params[0].info["reg_name"] = corresp_before_ef.params[0].info["reg_name"]

                        elif corresp_before_ef.type in ["ARITH", "LOAD_S", "LOAD_CT"]:
                            
                            # example for ARITH, analogous for rest
                            # r1 = t1 <op> t2
                            # r2 = r1
                            # joined (for r2): r2 = t1 <op> t2

                            ef.type = corresp_before_ef.type
                            ef.params = deepcopy(corresp_before_ef.params)

                elif ef.type == "ARITH":
                    
                    expr = ef.params[0]
                    for reg_in_elem in _recursive_arith_exploration(expr):
                        
                        reg_in_name = reg_in_elem.info["reg_name"]

                        corresp_before_ef = None
                        for before_ef in acc_effects:

                            if before_ef.destination_element.info["reg_name"] == reg_in_name:
                                corresp_before_ef = before_ef
                                break

                        if corresp_before_ef is not None:

                            if corresp_before_ef.type == "LOAD_S":

                                reg_in_elem.type = "64b_stack_val"
                                reg_in_elem.info = {"id": corresp_before_ef.params[0].info["id"]}

                            elif corresp_before_ef.type == "LOAD_CT":
                                
                                reg_in_elem.type = "ct_val"
                                reg_in_elem.info = {"value": corresp_before_ef.params[0].info["value"]}

                            elif corresp_before_ef.type == "MOV_RR":
                                reg_in_elem.info["reg_name"] = corresp_before_ef.params[0].info["reg_name"]

                            elif corresp_before_ef.type == "ARITH":
                                
                                reg_in_elem.type = corresp_before_ef.params[0].type
                                reg_in_elem.info = deepcopy(corresp_before_ef.params[0].info)
        
            # step 4) and 5)
            for before_ef in acc_effects:
                if before_ef.destination_element is not None:

                    before_ef_dest_reg_name = before_ef.destination_element.info["reg_name"]

                    overridden = False
                    for ef in new_acc_effect_list:

                        if (ef.destination_element is not None) and (ef.destination_element.info["reg_name"] == before_ef_dest_reg_name):
                            overridden = True

                    if overridden is False:
                        new_acc_effect_list.append(before_ef)
                    
            # step 5) and 6)
            acc_effects.clear()
            for ef in new_acc_effect_list:
                
                if _ignored_effect(ef) is False:
                    acc_effects.append(ef)

        # step 7)
        acc_effects_filtered = []
        for ef in acc_effects:
            
            if _ignored_effect(ef) is False:
                acc_effects_filtered.append(ef)
                
        # the rsp must be at the end of the stack view, 
        # so that the return address of the gadget can be added
        if rsp_pos != len(acc_stack.elements):
            return None

        gadget = ROP_gadget()

        # return address for the next gadget / function
        acc_stack.push(_structured_element.instantiate_structured_element("64b_stack_val"))
        acc_stack.elements[rsp_pos].info["id"] = _64b_stack_view.get_elem_id()
        rsp_pos += 1

        gadget.stack = acc_stack
        gadget.effects = acc_effects_filtered

        return gadget

    # method responsible for joining two effects list
    # does NOT make any deep copy - fst and snd should be created copies
    # resembles join_instr_effects, but:
    #   * does not take any stack into consideration
    #   * returns a list of effects, not a gadget
    #   * only two effects list can be joined at a time
    @staticmethod
    def join_effects(fst: List[_effect], snd: List[_effect]):

        if len(fst) == 0 or len(snd) == 0:
            return fst + snd

        # depth-first exploration of <op>-type _structured_element arithmetic tree
        # yielding every _structured_element of type "reg_in"
        def _recursive_arith_exploration(element: _structured_element):
        
            if element.type == "reg_in":
                yield element

            elif element.is_op():
                
                if element.info["term_1"] is not None:
                    for reg_in_elem in _recursive_arith_exploration(element.info["term_1"]):
                        yield reg_in_elem

                if element.info["term_2"] is not None:
                    for reg_in_elem in _recursive_arith_exploration(element.info["term_2"]):
                        yield reg_in_elem
        
        # eliminate from the joined list effects such as NO_OP or "move r_i, r_i"
        def _ignored_effect(ef: _effect):

            if ef.type == "ARITH":

                ef.r_independent_check()
                ef.simplify(use_r_independent_prop=True, fixed_stack_val_ids=[], fix_every_stack_val=False, 
                            reg_start_val={}, save_ct_into = _existent_constants)

            if ef.type in ["NO_OP", "ADD_RSP"]:
                return True

            if ef.type == "MOV_RR" and ef.destination_element.info["reg_name"] == ef.params[0].info["reg_name"]:
                return True

            return False
            
        res = snd

        # replacing every reg_in from res(=snd) with corresponding reg_out from fst
        for ef in res:

            if ef.type == "MOV_RR":
                
                reg_in_name = ef.params[0].info["reg_name"]

                corresp_before_ef = None
                for before_ef in fst:

                    if before_ef.destination_element.info["reg_name"] == reg_in_name:
                        corresp_before_ef = before_ef
                        break

                if corresp_before_ef is not None:
                    
                    if corresp_before_ef.type == "MOV_RR":
                        ef.params[0].info["reg_name"] = corresp_before_ef.params[0].info["reg_name"]

                    elif corresp_before_ef.type in ["ARITH", "LOAD_S", "LOAD_CT"]:

                        ef.type = corresp_before_ef.type
                        ef.params = corresp_before_ef.params    # NO DEEPCOPY

            elif ef.type == "ARITH":
                
                expr = ef.params[0]
                for reg_in_elem in _recursive_arith_exploration(expr):
                    
                    reg_in_name = reg_in_elem.info["reg_name"]

                    corresp_before_ef = None
                    for before_ef in fst:

                        if before_ef.destination_element.info["reg_name"] == reg_in_name:
                            corresp_before_ef = before_ef
                            break

                    if corresp_before_ef is not None:

                        if corresp_before_ef.type == "LOAD_S":

                            reg_in_elem.type = "64b_stack_val"
                            reg_in_elem.info = {"id": corresp_before_ef.params[0].info["id"]}

                        elif corresp_before_ef.type == "LOAD_CT":
                            
                            reg_in_elem.type = "ct_val"
                            reg_in_elem.info = {"value": corresp_before_ef.params[0].info["value"]}

                        elif corresp_before_ef.type == "MOV_RR":
                            reg_in_elem.info["reg_name"] = corresp_before_ef.params[0].info["reg_name"]

                        elif corresp_before_ef.type == "ARITH":
                            
                            reg_in_elem.type = corresp_before_ef.params[0].type
                            reg_in_elem.info = corresp_before_ef.params[0].info     # NO DEEPCOPY
    
        # copying every effect from fst that has reg_out which is not in any reg_out from res
        for before_ef in fst:
            if before_ef.destination_element is not None:

                before_ef_dest_reg_name = before_ef.destination_element.info["reg_name"]

                overridden = False
                for ef in res:

                    if (ef.destination_element is not None) and (ef.destination_element.info["reg_name"] == before_ef_dest_reg_name):
                        overridden = True

                if overridden is False:
                    res.append(before_ef)
                
        # filtering
        res_filtered = []
        for ef in res:
            
            if _ignored_effect(ef) is False:
                res_filtered.append(ef)

        return res_filtered

    # mostly for debugging purposes
    def __str__(self):
        return f"effect type {self.type}, destination element {self.destination_element}, params {[str(el) for el in self.params]}"

# gadget class that has associated a stack view and its effects (currently, operating on registers and/or stack popping)
# a gadget object can store two identical gadgets, but at different addresses
class ROP_gadget:

    # dictionary to map effect types to gadgets or chains, for ease of access
    _effects_to_gadgets: Dict[str, Dict[str, List[ROP_gadget]]] = {}
    for ef in ["LOAD_S", "LOAD_CT", "MOV_RR", "ARITH"]:
        _effects_to_gadgets.update({ef: {}})

        for dest_reg in _effect.SUPPORTED_REGS:
            _effects_to_gadgets[ef].update({dest_reg: []})

    # maximum gadget byte length to be searched for
    MAX_GADGET_BYTE_LEN = 30

    def __init__(self):

        self.stack = _64b_stack_view()
        self.effects: List[_effect] = []

        self.addrs: List[int] = []
        self.b: bytes = None

    def get_stack_size(self):
        return len(self.stack.elements)

    def get_next_addr(self):
        return _64b_stack_view.stack_values[self.stack.elements[-1].info["id"]]

    def set_next_addr(self, addr: int):
        _64b_stack_view.stack_values[self.stack.elements[-1].info["id"]] = addr

    # by default, it contains the addresses without ASLR/PIE offsets
    def get_current_addrs(self):
        return [_64b_stack_view.stack_values[addr] for addr in self.addrs]

    def show(self, capstone_handle: Cs = None, show_addr = True, show_stack = True):

        if len(self.addrs) == 0:
            print("(empty gadget)")
            return

        if capstone_handle is None:
            capstone_handle = Cs(CS_ARCH_X86, CS_MODE_64)

        disas_instr_generator = capstone_handle.disasm(self.b, self.get_current_addrs()[0])
        for ins in disas_instr_generator:

            if show_addr is True:
                print(f"{hex(ins.address)}: {ins.mnemonic} {ins.op_str}")
            else:
                print(f"{ins.mnemonic} {ins.op_str}")

        if show_stack is True:
            print("----- STACK -----")
            self.show_stack_values()
            print("-----------------")

    def show_stack_values(self):

        for el in self.stack.elements:

            if el.type == "64b_stack_val":

                val = _64b_stack_view.stack_values[el.info['id']]
                if val is not None:
                    print(f"id {el.info['id']}: {hex(val)}")
                else:
                    print(f"id {el.info['id']}: EMPTY")
            else:
                print("====PAD====")

    def add_current_addr(self, addr: int):

        new_addr_id = _64b_stack_view.get_elem_id()
        self.addrs.append(new_addr_id)
        _64b_stack_view.stack_values[new_addr_id] = addr

    # pupulate the _effects_to_gadgets dictionary
    def save_in_dict(self):
        for ef in self.effects:
            ROP_gadget._effects_to_gadgets[ef.type][ef.destination_element.info["reg_name"]].append(self)

    # auxiliary internal method for duplication
    def _duplicate_stack(self, cpy: ROP_gadget | ROP_chain, copy_stack_associated_values):
        
        old_new_id: Dict[int, int] = {}
        def _get_new_id(old_id: int):
            
            if old_id in old_new_id.keys():
                return old_new_id[old_id]

            return None

        # recursive search for stack elements that need to be replaced
        def _recursive_replace(op_element: _structured_element):
            
            if op_element.type == "64b_stack_val":
                op_element.info["id"] = _get_new_id(op_element.info["id"])

            elif op_element.is_op():
                
                if op_element.info["term_1"] is not None:
                    _recursive_replace(op_element.info["term_1"])

                if op_element.info["term_2"] is not None:
                    _recursive_replace(op_element.info["term_2"])

        for stack_elem in self.stack.elements:

            if stack_elem.type == "64b_stack_pad":
                cpy.stack.push(_structured_element.instantiate_structured_element("64b_stack_pad"))

            elif stack_elem.type == "64b_stack_val":

                cpy_stack_elem = _structured_element.instantiate_structured_element("64b_stack_val")

                # check whether the current id has already been replaced in a previous stack element instance
                cpy_id = _get_new_id(stack_elem.info["id"])
                if cpy_id is None:
                    
                    cpy_stack_elem.info["id"] = _64b_stack_view.get_elem_id()
                    old_new_id.update({stack_elem.info["id"]: cpy_stack_elem.info["id"]})

                    if copy_stack_associated_values is True:
                        _64b_stack_view.stack_values[cpy_stack_elem.info["id"]] = _64b_stack_view.stack_values[stack_elem.info["id"]]

                else:
                    cpy_stack_elem.info["id"] = cpy_id                    

                cpy.stack.push(cpy_stack_elem)

        cpy.effects = deepcopy(self.effects)
        for ef in cpy.effects:

            if ef.type == "LOAD_S":
                ef.params[0].info["id"] = _get_new_id(ef.params[0].info["id"])

            elif ef.type == "ARITH":
                _recursive_replace(ef.params[0])

        return cpy, old_new_id

    # a gadget has fixed stack element ids that are kept globally
    # so to use multiple times the same gadget,
    # a duplicate method is needed, that automatically 
    # makes a deep copy of the stack elements and ids, and also the effects
    # it returns the new copy and the old_new_id list
    # NOTE: if the old id had an associated value, it also copies it, if chosen so
    def duplicate(self, copy_stack_associated_values = True):

        cpy = ROP_gadget()

        cpy.b = self.b

        cpy.addrs = self.addrs.copy()
        for i in range(len(cpy.addrs)):
            
            addr_val = _64b_stack_view.stack_values[cpy.addrs[i]]
            addr_id_cpy = _64b_stack_view.get_elem_id()
            _64b_stack_view.stack_values[addr_id_cpy] = addr_val            
            cpy.addrs[i] = addr_id_cpy

        return self._duplicate_stack(cpy, copy_stack_associated_values)
    
    # this method should ONLY be called when you DO NOT NEED THE GADGET ANYMORE
    # it clears the stack and removes the id s that are also present in the corresponding dictionary
    # so that no memory is leaked
    def remove_stack_ids(self):
        
        self.b = None
        self.effects = None

        for addr_id in self.addrs:
            _64b_stack_view.stack_values.pop(addr_id, None)

        for stack_elem in self.stack.elements:
            if stack_elem.type == "64b_stack_val":
                _64b_stack_view.stack_values.pop(stack_elem.info["id"], None)   # if the key does not exist, None is returned

        self.stack = None

    # function to check whether the given registers remain unchanged or not
    def _check_fixed_regs(self, fixed_reg_list: List[str]):

        for fixed_r in fixed_reg_list:
            for ef in self.effects:

                if ef.destination_element.info["reg_name"] == fixed_r: 

                    if ef.type in ["LOAD_CT", "MOV_RR", "LOAD_S"]:
                        return False

                    elif ef.type == "ARITH":
                        
                        nop_mov = _effect.make_mov_rr_effect(fixed_r, fixed_r)
                        if _effect._match_arith(nop_mov, ef) is False:
                            return False

        return True

    # creates a graph for transitioning a value between registers
    @staticmethod
    def _get_trans_reg_graph(reg_start_values: Dict[str, _structured_element] = {}):

        # dict to retain all gadgets for moving a value from a register to another
        trans_reg_graph: Dict[str, Dict[str, List[ROP_gadget]]] = {dest: {src: [] for src in _effect.SUPPORTED_REGS} for dest in _effect.SUPPORTED_REGS}

        # whether there is a path from [reg_dest][reg_src] or not
        path_from: Dict[str, Dict[str, bool]] = {dest: {src: False for src in _effect.SUPPORTED_REGS} for dest in _effect.SUPPORTED_REGS}

        for dest in _effect.SUPPORTED_REGS:
            for src in _effect.SUPPORTED_REGS:

                dest_from_src_ef = _effect.make_mov_rr_effect(dest, src)
                dest_from_src_gadgets = ROP_gadget.search_gadget(wanted_effect=dest_from_src_ef, max_stack_size=2 ** 63, 
                                                                    reg_start_values=reg_start_values, max_search_cnt=2 ** 63)

                if len(dest_from_src_gadgets) != 0:

                    trans_reg_graph[dest][src] = dest_from_src_gadgets
                    path_from[dest][src] = True

        # completing path_from (Roy-Warshal)
        for k in _effect.SUPPORTED_REGS:
            for i in _effect.SUPPORTED_REGS:
                for j in _effect.SUPPORTED_REGS:

                    if (path_from[i][k] is True) and (path_from[k][j] is True):
                        path_from[i][j] = True

        return trans_reg_graph, path_from

    # internal method for searching a gadget
    # receives the wanted effect, max stack size, the fixed registers list (optional) and the register start values (optional)
    # it also receives a filter function as argument, to filter all found gadgets, by default it is the identity
    # NOTE: fixed registers may actually be used, as long as at the end of the gadget they contain their initial value
    # NOTE: the arguments are assumed to be valid (checks should be done inside the corresponding public method in ROP_util class)
    # NOTE: max stack size is measured internally as the number of 64bit elements (max stack size in bytes // 8)
    @staticmethod
    def search_gadget(wanted_effect: _effect, max_stack_size: int = 20, fixed_reg_list: List[str] = [], 
                        reg_start_values: Dict[str, _structured_element] = {}, max_search_cnt: int = 100) -> List[ROP_gadget]:

        # as in duplicate method, represents a map 
        # between the original gadget stack ids and the new gadget stack ids
        def _get_new_id(old_new_id: Dict[int, int], old_id: int):

            if old_id in old_new_id.keys():
                return old_new_id[old_id]

            return None

        # a gadget can be referenced multiple times in the _effects_to_gadgets dictionary
        # (when a gadget has multiple effects)
        # so, once a gadget has been checked, there is no need to check it twice
        tried_gadget_cache = set()

        # main function to try a gadget 
        def _try_gadget(candidate_g: ROP_gadget, wanted_effect: _effect, searched_effect_types: List[str]):
            
            if candidate_g in tried_gadget_cache:
                return None

            if candidate_g.get_stack_size() > max_stack_size:

                tried_gadget_cache.add(candidate_g)
                return None
                
            # copies that can be manipulated without changing the original objects
            candidate_g_cpy, org_to_fstid = candidate_g.duplicate(copy_stack_associated_values=True)
            wanted_effect_cpy: _effect = deepcopy(wanted_effect)

            # simplyfing everything before trying to match
            # NOTE: for gadgets, at least at this step, there should be no stack value to fix
            #       but the implementation is generalized for possible future additional features
            for ef in candidate_g_cpy.effects:
                ef.simplify(use_r_independent_prop=False, fix_every_stack_val=True, reg_start_val=reg_start_values, save_ct_into=None)

            # TODO not needed ???
            # wanted_effect_cpy.simplify(use_r_independent_prop=False, fix_every_stack_val=True, reg_start_val=reg_start_values, save_ct_into=None)

            # every entry in _effects_to_gadgets has a corresponding effect
            # it is not kept in the dict, but can be found
            # by searching in the gadget's effect list, by the reg_out name
            # NOTE: the type is not checked, because it can be changed by the simplifly calls from before
            #       and even if they did not, the check would be redundant (only one effect with the corresponding reg_name as destination)
            candidate_effect = None
            for ef in candidate_g_cpy.effects:

                if ef.destination_element.info["reg_name"] == wanted_effect_cpy.destination_element.info["reg_name"]:
                    candidate_effect = ef
                    break

            if candidate_effect.type not in searched_effect_types:

                tried_gadget_cache.add(candidate_g)
                candidate_g_cpy.remove_stack_ids()
                return None

            matched = wanted_effect_cpy.match(candidate_effect)

            '''print(f"matched: {matched}")
            candidate_g_cpy.show()
            print()'''

            if matched is False:

                tried_gadget_cache.add(candidate_g)
                candidate_g_cpy.remove_stack_ids()
                return None
            
            # simplify not necessary here, but might help when evaluating arith expressions
            for ef in candidate_g_cpy.effects:
                ef.simplify(use_r_independent_prop=False, fix_every_stack_val=True, reg_start_val={}, save_ct_into=None)

            is_fixed = candidate_g_cpy._check_fixed_regs(fixed_reg_list)

            if is_fixed is False:

                tried_gadget_cache.add(candidate_g)
                candidate_g_cpy.remove_stack_ids()
                return None

            # gadget is accepted, a third copy is created from the original gadget
            # that is not simplified like the first gadget copy, 
            # but does contain all the additional stack ids and their associated value from the first gadget copy
            # then, the first temporary copy has its stack ids and other contents removed

            accepted_gadget, org_to_sndid = candidate_g.duplicate(copy_stack_associated_values=True)

            for org_stack_elem in candidate_g.stack.elements:
                if org_stack_elem.type == "64b_stack_val":

                    fstid = _get_new_id(org_to_fstid, org_stack_elem.info["id"])
                    if _64b_stack_view.stack_values[org_stack_elem.info["id"]] != _64b_stack_view.stack_values[fstid]:

                        if _64b_stack_view.stack_values[org_stack_elem.info["id"]] != None:
                            raise RuntimeError("original gadget and cloned gadget non-null values are different")

                        sndid = _get_new_id(org_to_sndid, org_stack_elem.info["id"])
                        _64b_stack_view.stack_values[sndid] = _64b_stack_view.stack_values[fstid]

                    # else, the accepted_gadget already has the original value

            candidate_g_cpy.remove_stack_ids()

            tried_gadget_cache.add(candidate_g)
            return accepted_gadget

        # table of possible effect types matching
        # there can be multiple searched effects because, given specific circumstances, some effects can change type
        # NOTE: LOAD_S is intentionally restricted to only other LOAD_S effects, for an efficient/ fast search
        #       if one wants to have all the possible ways of loading a value in a register, LOAD_CT matching should be chosen instead
        # LOAD_S -> LOAD_S
        # LOAD_CT -> LOAD_CT, LOAD_S (always false if max stack size == 0), ARITH
        # MOV_RR -> MOV_RR, ARITH
        # ARITH -> ARITH

        # searched effect type filtering
        # is done in two places: here, less restrictive
        # and inside the try gadget function, more restrictive
        # this is because we still want the search to be optimised
        # but also we need to take into account that the reg start values
        # can change some effect types into other types

        found_g: List[ROP_gadget] = []
        searched_effect_types_snd: List[str] = []
        searched_effect_types_fst: List[str] = []

        if wanted_effect.type == "LOAD_S":

            searched_effect_types_snd.append("LOAD_S")

            searched_effect_types_fst.append("LOAD_S")

        elif wanted_effect.type == "LOAD_CT":

            searched_effect_types_snd.append("LOAD_S")
            searched_effect_types_snd.append("LOAD_CT")
            searched_effect_types_snd.append("ARITH")

            searched_effect_types_fst.append("LOAD_S")
            searched_effect_types_fst.append("LOAD_CT")
            searched_effect_types_fst.append("MOV_RR")
            searched_effect_types_fst.append("ARITH")

        elif wanted_effect.type == "MOV_RR":

            searched_effect_types_snd.append("MOV_RR")
            searched_effect_types_snd.append("ARITH")

            searched_effect_types_fst.append("MOV_RR")
            searched_effect_types_fst.append("ARITH")

        elif wanted_effect.type == "ARITH":

            searched_effect_types_snd.append("ARITH")
            
            searched_effect_types_fst.append("ARITH")
            searched_effect_types_fst.append("MOV_RR")

        for srch_t in searched_effect_types_fst:

            found_per_t_cnt = 0

            candidate_g: ROP_gadget
            for candidate_g in ROP_gadget._effects_to_gadgets[srch_t][wanted_effect.destination_element.info["reg_name"]]:
                
                accepted_gadget = _try_gadget(candidate_g, wanted_effect, searched_effect_types_snd)
                if accepted_gadget is not None:

                    found_g.append(accepted_gadget)

                    found_per_t_cnt += 1
                    if found_per_t_cnt == max_search_cnt:
                        break
        
        found_g.sort(key = lambda g: g.get_stack_size())
        return found_g[:max_search_cnt]

    # main method of parsing instruction chunks and creating gadgets
    # here it is decided whether the gadget is valid / accepted / supported, what effects is has and so on
    # this method also calls the save_in_dict
    # NOTE: addr parameter contains the default address, when ASLR/PIE is NOT enabled
    @staticmethod
    def create_gadget(instr_generator: Generator[CsInsn, None, None], b_instr: bytes, addr: int = None) -> Tuple[ROP_gadget, bool]:
        
        # decide here whether to send signal to the caller procedure
        # so that it stops appending preffixes to the same "gadget"
        def _send_stop_flag(instr: CsInsn, b_instr: bytes):
            return len(b_instr) > ROP_gadget.MAX_GADGET_BYTE_LEN

        # first, each instruction is analysed semantically and translated in some effects
        # then, the effects will be cumulated from first to last instruction, to obtain the gadget
        effects_per_instruction: List[List[_effect]] = []

        is_ret = False
        for instr in instr_generator:

            if instr.mnemonic == "ret":
                is_ret = True       # check whether the gedget ends with "ret" or not
                break

            instr_effects = _effect.analyse_instr(instr)
            if instr_effects is None:
                return None, _send_stop_flag(instr, b_instr)

            effects_per_instruction.append(instr_effects)
        
        if is_ret is False:
            return None, _send_stop_flag(None, b_instr)

        candidate_gadget = _effect.join_instr_effects(effects_per_instruction)
        if candidate_gadget is None:
            return None, _send_stop_flag(None, b_instr)

        candidate_gadget.add_current_addr(addr)
        candidate_gadget.b = b_instr

        candidate_gadget.save_in_dict()
        
        return candidate_gadget, _send_stop_flag(None, b_instr)

    # auxiliary internal method for joining gadgets / chains
    @staticmethod
    def _join_ef_stk(fst: ROP_gadget | ROP_chain, snd: ROP_gadget | ROP_chain):

        fst_cpy, _ = fst.duplicate(copy_stack_associated_values=True)
        snd_cpy, _ = snd.duplicate(copy_stack_associated_values=True)

        joined_effects = _effect.join_effects(fst_cpy.effects, snd_cpy.effects)
        joined_stack = _64b_stack_view.join_stacks(fst_cpy.stack, snd_cpy.stack)

        res_chain = ROP_chain()

        res_chain.stack = joined_stack
        res_chain.effects = joined_effects

        return res_chain, fst_cpy, snd_cpy

    def join(self, snd: ROP_gadget | ROP_chain) -> ROP_chain:

        fst_cpy: ROP_gadget
        res_chain, fst_cpy, snd_cpy = ROP_gadget._join_ef_stk(self, snd)

        if type(snd) == ROP_chain:

            res_chain.b = [fst_cpy.b] + snd_cpy.b
            res_chain.gadgets_stackview_offset = [0] + [off + fst_cpy.get_stack_size() for off in snd_cpy.gadgets_stackview_offset]
            res_chain.addrs = [fst_cpy.addrs] + snd_cpy.addrs

        else:

            res_chain.b = [fst_cpy.b, snd_cpy.b]
            res_chain.gadgets_stackview_offset = [0, fst_cpy.get_stack_size()]
            res_chain.addrs = [fst_cpy.addrs, snd_cpy.addrs]

        return res_chain

    # mostly for debugging purposes
    def __str__(self):
        return f"ROP gadget with stack {self.stack}, addresses are {self.get_current_addrs()}, effects {[str(ef) for ef in self.effects]}"

# class to store rop chains, 
# in almost the same way as rop gadgets
class ROP_chain(ROP_gadget):

    def __init__(self):

        self.stack: _64b_stack_view = _64b_stack_view()
        self.effects: List[_effect] = []

        self.b: List[bytes] = []
        self.addrs: List[List[int]] = []

        self.gadgets_stackview_offset: List[int] = []

    # converts a gadget to a chain with only one gadget
    # does NOT copy
    @staticmethod
    def convert(gadget: ROP_gadget) -> ROP_chain:

        chain = ROP_chain()

        chain.effects = gadget.effects
        chain.stack = gadget.stack

        chain.b = [gadget.b]
        chain.gadgets_stackview_offset = [0]
        chain.addrs = [gadget.addrs]

        return chain

    def get_gadget_cnt(self):
        return len(self.gadgets_stackview_offset)

    # generator instead of function as in ROP_gadget class
    def get_current_addrs(self): 
        for i in range(self.get_gadget_cnt()):
            yield self.gadgets_stackview_offset[i], [_64b_stack_view.stack_values[addr_id] for addr_id in self.addrs[i]]

    def show(self, capstone_handle: Cs = None, show_addr = True, show_stack = True):

        if len(self.addrs) == 0:
            print("(empty gadget)")
            return

        if capstone_handle is None:
            capstone_handle = Cs(CS_ARCH_X86, CS_MODE_64)

        _i = 0
        for _, addrs in self.get_current_addrs():

            disas_instr_generator = capstone_handle.disasm(self.b[_i], addrs[0])
            for ins in disas_instr_generator:

                if show_addr is True:
                    print(f"{hex(ins.address)}: {ins.mnemonic} {ins.op_str}")
                else:
                    print(f"{ins.mnemonic} {ins.op_str}")

            _i += 1

        if show_stack is True:
            print("----- STACK -----")
            self.show_stack_values()
            print("-----------------")

    def add_current_addr(self, addr: int, idx: int):
        
        new_addr_id = _64b_stack_view.get_elem_id()
        self.addrs[idx].append(new_addr_id)
        _64b_stack_view.stack_values[new_addr_id] = addr

    # TODO
    def save_in_dict(self):
        pass

    def duplicate(self, copy_stack_associated_values = True):

        cpy = ROP_chain()

        cpy.b = self.b.copy()
        cpy.gadgets_stackview_offset = self.gadgets_stackview_offset.copy()

        cpy.addrs = deepcopy(self.addrs)
        for i in range(self.get_gadget_cnt()):
            for j in range(len(cpy.addrs[i])):
            
                addr_val = _64b_stack_view.stack_values[cpy.addrs[i][j]]
                addr_id_cpy = _64b_stack_view.get_elem_id()
                _64b_stack_view.stack_values[addr_id_cpy] = addr_val            
                cpy.addrs[i][j] = addr_id_cpy

        return self._duplicate_stack(cpy, copy_stack_associated_values)
    
    def remove_stack_ids(self):

        for i in range(self.get_gadget_cnt()):
            for addr in self.addrs[i]:
                _64b_stack_view.stack_values.pop(addr, None)

        for stack_elem in self.stack.elements:
            if stack_elem.type == "64b_stack_val":
                _64b_stack_view.stack_values.pop(stack_elem.info["id"], None)   # if the key does not exist, None is returned

        self.b = None
        self.effects = None
        self.gadgets_stackview_offset = None
        self.stack = None

    def join(self, snd: ROP_gadget | ROP_chain) -> ROP_chain:

        fst_cpy: ROP_chain
        res_chain, fst_cpy, snd_cpy = ROP_gadget._join_ef_stk(self, snd)

        if type(snd) == ROP_chain:

            res_chain.b = fst_cpy.b + snd_cpy.b
            res_chain.gadgets_stackview_offset = fst_cpy.gadgets_stackview_offset
            res_chain.gadgets_stackview_offset += [off + fst_cpy.get_stack_size() for off in snd_cpy.gadgets_stackview_offset]
            res_chain.addrs = fst_cpy.addrs + snd_cpy.addrs

        else:

            res_chain.b = fst_cpy.b
            res_chain.b.append(snd_cpy.b)
            res_chain.gadgets_stackview_offset = fst_cpy.gadgets_stackview_offset
            res_chain.gadgets_stackview_offset.append(fst_cpy.get_stack_size())
            res_chain.addrs = fst_cpy.addrs
            res_chain.addrs.append(snd_cpy.addrs)

        return res_chain

    # method responsible for automatically constructing rop chains
    # based on gadgets from ROP_gadget._effects_to_gadgets dict
    @staticmethod
    def search_chain(wanted_effect: _effect, max_stack_size: int = 20, fixed_reg_list: List[str] = [], 
                        reg_start_values: Dict[str, _structured_element] = {}, max_search_cnt: int = 100) -> List[ROP_chain]:

        # returns elements with the smallest stack size
        def _filter(ch_list):
            ch_list.sort(key = lambda chain: chain.get_stack_size())
            return ch_list[:max_search_cnt]

        # search only gadgets, 
        # and then convert them to ROP_chain objects
        def _search_gadgets(wanted_ef: _effect) -> List[ROP_chain]:
            
            gadgets = ROP_gadget.search_gadget(wanted_effect=wanted_ef, max_stack_size=max_stack_size, fixed_reg_list=fixed_reg_list,
                                                reg_start_values=reg_start_values, max_search_cnt=max_search_cnt)

            return [ROP_chain.convert(g) for g in gadgets]

        # search gadgets that have the destination register
        # any register that can transfer value to the wanted effect's destination register
        # and then join the found gadgets with the corresponding graph path
        def _search_gadgets_transgraph()-> List[ROP_chain]:
            
            # graph as a list(dict) of neighbours, and the path existence matrix
            trans_graph, _ = ROP_gadget._get_trans_reg_graph(reg_start_values)

            # cache [reg][gadget list] for the searched wanted_effect, with the destination register reg
            searched_cache: Dict[str, List[ROP_gadget]] = {reg: None for reg in _effect.SUPPORTED_REGS}

            # auxiliary data structure for the graph traversal
            _visited = set()

            # generator that returns a list of gadgets that compose the transfer path, and the accumulated stack size
            def _path_finder(current_reg: str, mss: int):

                _visited.add(current_reg)
                
                if searched_cache[current_reg] is None:

                    wanted_effect_cpy = deepcopy(wanted_effect)
                    wanted_effect_cpy.destination_element.info["reg_name"] = current_reg
                    searched_cache[current_reg] = ROP_gadget.search_gadget(wanted_effect=wanted_effect_cpy, max_stack_size=mss, 
                                                                            fixed_reg_list=[], reg_start_values=reg_start_values, max_search_cnt=2 ** 63)
            
                for g in searched_cache[current_reg]:

                    stack_size = g.get_stack_size()

                    if stack_size <= mss:
                        yield [g], stack_size
                    else:
                        break

                for src_reg, gs in trans_graph[current_reg].items():
                    if (src_reg not in _visited) and (len(gs) > 0):

                        mss_reached = False

                        for path_suffix, stack_size in _path_finder(src_reg, mss - gs[0].get_stack_size()):
                
                            for trans_g in gs:
                                
                                tgss = trans_g.get_stack_size()

                                if tgss + stack_size <= mss:
                                    yield [trans_g] + path_suffix, tgss + stack_size
                                else:
                                    mss_reached = True
                                    break
                                    
                            if mss_reached is True:
                                break
                        
                _visited.remove(current_reg)

            found_ch: List[ROP_chain] = []

            for path, stack_size in _path_finder(wanted_effect.destination_element.info["reg_name"], max_stack_size):

                if stack_size > max_stack_size:
                    raise RuntimeError(f"stack size too big: {stack_size}, max {max_stack_size}")

                # DEBUG ONLY
                '''print("\n\nNEW ROUND\n\n")
                for g in path:
                    g.show(show_stack=True)
                    print()

                print("end show path")'''

                candidate_ch = ROP_chain.convert(path[-1].duplicate()[0])
                for g in path[-2::-1]:
                    print("\nAICI\n")
                    candidate_ch_aux = candidate_ch.join(g)
                    print()
                    candidate_ch_aux.show()
                    print()

                    # g.remove_stack_ids()
                    candidate_ch.remove_stack_ids()

                    candidate_ch = candidate_ch_aux
                print("END")
                if candidate_ch.get_stack_size() != stack_size:
                    raise RuntimeError(f"inconsistent stack size: expected {stack_size}, actual {candidate_ch.get_stack_size()}")

                # check the fixed registers
                if candidate_ch._check_fixed_regs(fixed_reg_list) is False:
                    candidate_ch.remove_stack_ids()
                
                else:
                    found_ch.append(candidate_ch)
                    if len(found_ch) == max_search_cnt:
                        break

            # clean up intermediary values
            for _, gs in searched_cache.items():
                if gs is not None:
                    for g in gs:
                        g.remove_stack_ids()

            for _, d in trans_graph.items():
                for _, gs in d.items():
                    if gs is not None:
                        for g in gs:
                            g.remove_stack_ids()

            return found_ch
        
        # bruteforce through gadgets, 
        # by replacing reg_in elements from the current effects list
        # with the reg_out s from another gadget
        # WARNING: can be very slow
        def _bruteforce()-> List[ROP_chain]:
            # TODO
            return []
        
        if wanted_effect.type == "LOAD_CT":
            
            r0 = []#_search_gadgets(wanted_effect)
            r1 = _search_gadgets_transgraph()   # also includes the gadgets

            return _filter(r0 + r1)

        elif wanted_effect.type == "MOV_RR":
            
            return []#_filter(_search_gadgets_transgraph())

        elif wanted_effect.type == "ARITH":
            
            r0 = _search_gadgets(wanted_effect)
            r1 = _search_gadgets_transgraph()
            r2 = _bruteforce()

            return []#_filter(r0 + r1 + r2)

        raise RuntimeError(f"Unrecognised wanted effect type when searching chains: {wanted_effect.type}")

    # mostly for debugging purposes
    def __str__(self):
        return f"ROP chain with stack {self.stack}, addresses are {'TODO'}, effects {[str(ef) for ef in self.effects]}"

# main class, the "entry point" in using the functionalities implemented in this file
# it only implements a tiny fraction of the functionality the ROP concept can provide
# but it should be easy to extend at any time
class ROP_util:

    # all possible endpoints for a gadget
    # that transfer control to another gadget
    ENDPOINTS = { b'\xc3': "ret", b'\xff\xe0': "jmp rax", b'\xff\xe3': "jmp rbx", b'\xff\xe1': "jmp rcx", 
                    b'\xff\xe2': "jmp rdx", b'\xff\xe5': "jmp rbp", b'\xff\xe6': "jmp rsi", b'\xff\xe7': "jmp rdi", 
                    b'\x41\xff\xe0': "jmp r8", b'\x41\xff\xe1': "jmp r9", b'\x41\xff\xe2': "jmp r10", b'\x41\xff\xe3': "jmp r11", 
                    b'\x41\xff\xe4': "jmp r12", b'\x41\xff\xe5': "jmp r13", b'\x41\xff\xe6': "jmp r14", b'\x41\xff\xe7': "jmp r15" }

    def __init__(self, filepath: str):

        self.bin_handle = Elf_util(filepath)
        self.exec_bytes = self.bin_handle.load_x_bytes()

        self.capstone = Cs(CS_ARCH_X86, CS_MODE_64)

        self.bin_handle = None

        self.ret_gadgets = None
        self.ret_offsets = None
        self.endpoints_offsets = None

    def find_endpoints_offsets(self) -> List[Tuple[int, int]]:

        if self.endpoints_offsets is None:

            self.endpoints_offsets = []
            
            for i in range(len(self.exec_bytes)):
                
                xc_offset, xc = self.exec_bytes[i]
                for ib in range(len(xc)):

                    if xc[ib: ib + 1] in ROP_util.ENDPOINTS.keys():
                        self.endpoints_offsets.append((i, xc_offset + ib))
                        

        return self.endpoints_offsets

    def find_ret_offsets(self) -> List[Tuple[int, int]]:

        if self.ret_offsets is None:

            self.ret_offsets = []

            for i in range(len(self.exec_bytes)):
                
                xc_offset, xc = self.exec_bytes[i]
                for ib in range(len(xc)):

                    if xc[ib: ib + 1] == b'\xc3':
                        self.ret_offsets.append((i, xc_offset + ib))

        return self.ret_offsets

    def find_ret_gadgets(self) -> List[ROP_gadget]:

        # dict to help identify gadget duplicates
        bytes_to_gadgets: Dict[bytes, ROP_gadget] = {}

        def _check_duplicate_gadget(b_instr: bytes):

            if b_instr in bytes_to_gadgets.keys():
                return True
            return False
            
        if self.ret_gadgets is None:
            
            self.ret_gadgets = []

            ret_offsets = self.find_ret_offsets()

            # to check in constant time if the basse address
            # of a current gadget candidate actually steps over another ret
            ret_onlyoffsets = set(r[1] for r in ret_offsets)

            for xc_index, ret_offset in ret_offsets:
                
                neg_offset = 1
                while (ret_offset - neg_offset > 0) and ((ret_offset - neg_offset) not in ret_onlyoffsets):
                    
                    b_vaddr = self.exec_bytes[xc_index][0]
                    b_instr = self.exec_bytes[xc_index][1][ret_offset - neg_offset - b_vaddr: ret_offset - b_vaddr + 1]

                    stop = False
                    
                    if _check_duplicate_gadget(b_instr) is True:
                        bytes_to_gadgets[b_instr].add_current_addr(ret_offset - neg_offset)

                    else:

                        disas_instr_generator = self.capstone.disasm(b_instr, ret_offset - neg_offset)
                        g, stop = ROP_gadget.create_gadget(disas_instr_generator, b_instr, ret_offset - neg_offset)

                        if g is not None and len(g.effects) > 0:

                            self.ret_gadgets.append(g)
                            bytes_to_gadgets.update({b_instr: g})
                    
                    if stop is True:
                        break
                        
                    neg_offset += 1

            for ef in ["LOAD_S", "LOAD_CT", "MOV_RR", "ARITH"]:
                for reg in _effect.SUPPORTED_REGS:
                    ROP_gadget._effects_to_gadgets[ef][reg].sort(key = lambda g: len(g.stack.elements))
                
        return self.ret_gadgets

     # show the dissasembled view of a gadget instructions'

    # search a gadget, specifying the effects in a statement
    # statement is parsed and converted in an internal format
    def search_gadget(self, statement: str):
        pass

def _test_gadgets():

    def _transition_graph():

        print(f"======= making register transition graph =======\n\n")

        t = time.time()

        trans_reg_graph, is_path = ROP_gadget._get_trans_reg_graph()
        for dest in is_path.keys():
            print(f"dest: {dest}: {is_path[dest]}\n")

        print(f"======= register transition graph created in {time.time() - t} seconds =======\n\n")

    def _search_gadget_ex1():

        print(f"======= searching for gadgets =======")

        print("load in rax 0x000000004f3f2f1f, rdx and rax fixed\n\n")

        t = time.time()

        effect = _effect.make_load_ct_effect("rax", 0x000000004f3f2f1f)

        rax_start_ct = _structured_element.instantiate_structured_element("ct_val")
        rdx_start_ct = _structured_element.instantiate_structured_element("ct_val")
        rax_start_ct.info["value"] = 0x000000004f3f2f1f - 3 + 0xba045677
        rdx_start_ct.info["value"] = 0xba045677
        gs = ROP_gadget.search_gadget(effect, max_stack_size=300, max_search_cnt=100000, reg_start_values={"rax": rax_start_ct, "rdx": rdx_start_ct})
        for g in gs:
            g.show(capstone_handle=r.capstone)
            print()

        print(f"======= gadgets found in {time.time() - t} seconds =======\n\n")

    def _search_gadget_ex2():

        print(f"======= searching for gadgets =======")

        print("load in rax 0x000000004f3f2f1f, r15 and rbp fixed\n\n")

        t = time.time()

        effect = _effect.make_load_ct_effect("rax", 0x000000004f3f2f1f)

        v0 = _structured_element.instantiate_structured_element("ct_val")
        v1 = _structured_element.instantiate_structured_element("ct_val")
        v0.info["value"] = 0x000000004f3f2f2f
        v1.info["value"] = 0x10
        gs = ROP_gadget.search_gadget(effect, max_stack_size=300, max_search_cnt=100000, reg_start_values={"r15": v0, "rbp": v1})
        for g in gs:
            g.show(capstone_handle=r.capstone)
            print()

        print(f"======= gadgets found in {time.time() - t} seconds =======\n\n")

    def _search_gadget_ex3():

        print(f"======= searching for gadgets =======")

        print("move in rax <- r13, r12 = r13, r14 = r13\n\n")

        t = time.time()

        effect = _effect.make_mov_rr_effect("rax", "r13")

        v0 = _structured_element.instantiate_structured_element("reg_in")
        v1 = _structured_element.instantiate_structured_element("reg_in")
        v0.info["reg_name"] = "r13"
        v1.info["reg_name"] = "r13"
        gs = ROP_gadget.search_gadget(effect, max_stack_size=300, max_search_cnt=100000, reg_start_values={"r12": v0, "r14": v1})
        for g in gs:
            g.show(capstone_handle=r.capstone, show_stack=False)
            print()

        print(f"======= gadgets found in {time.time() - t} seconds =======\n\n")

    def _search_gadget_ex4():

        print(f"======= searching for gadgets =======")

        print("move in rax <- r13, r13 = r13 + r14\n\n")

        t = time.time()

        effect = _effect.make_mov_rr_effect("rax", "r13")

        v0 = _effect.make_arith_reg_effect("add", "r13", "r14").params[0]
        gs = ROP_gadget.search_gadget(effect, max_stack_size=300, max_search_cnt=100000, reg_start_values={"r13": v0})
        for g in gs:
            g.show(capstone_handle=r.capstone, show_stack=True)
            print()

        print(f"======= gadgets found in {time.time() - t} seconds =======\n\n")

    import time

    print(f"======= running roputils.py test =======")

    t = time.time()

    #r = ROP_util("app")    
    r = ROP_util("/usr/lib/x86_64-linux-gnu/libc-2.31.so")
    #r = ROP_util("/usr/bin/ls")
    r.find_ret_gadgets()

    for ef in ["LOAD_S", "LOAD_CT", "MOV_RR", "ARITH"]:
        for reg in _effect.SUPPORTED_REGS:
            print(f"{ef}, out reg {reg}: {len(ROP_gadget._effects_to_gadgets[ef][reg])}")

    print(f"\n======= init and gadgets explored in {time.time() - t} seconds =======\n\n")

    g: ROP_gadget
    for g in ROP_gadget._effects_to_gadgets["MOV_RR"]["rax"]:
        g.show(capstone_handle=r.capstone, show_stack=False)
        print()
    
    _transition_graph()

    #_search_gadget_ex1()
    #_search_gadget_ex2()
    #_search_gadget_ex3()
    #_search_gadget_ex4()

def _test_chains():

    def _search_chain_ex1():

        print(f"======= searching for chains =======")

        print("load in r8 0x000000004f3f2f1f\n\n")

        t = time.time()

        effect = _effect.make_load_ct_effect("r8", 0x000000004f3f2f1f)

        chs = ROP_chain.search_chain(effect, max_stack_size=20, max_search_cnt=100000, reg_start_values={})
        for ch in chs:
            ch.show(capstone_handle=r.capstone)
            print()

        print(f"======= chains found in {time.time() - t} seconds =======\n\n")

    import time

    print(f"======= running roputils.py test =======")

    t = time.time()

    #r = ROP_util("app")    
    r = ROP_util("/usr/lib/x86_64-linux-gnu/libc-2.31.so")
    #r = ROP_util("/usr/bin/ls")
    r.find_ret_gadgets()

    for ef in ["LOAD_S", "LOAD_CT", "MOV_RR", "ARITH"]:
        for reg in _effect.SUPPORTED_REGS:
            print(f"{ef}, out reg {reg}: {len(ROP_gadget._effects_to_gadgets[ef][reg])}")

    print(f"\n======= init and gadgets explored in {time.time() - t} seconds =======\n\n")

    _search_chain_ex1()


if __name__ == "__main__":
    #_test_gadgets()
    _test_chains()



