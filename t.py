from roputils import *

def _test():

    import time

    def _transition_graph(r: ROP_util):

        print(f"======= making register transition graph =======\n\n")

        t = time.time()

        trans_reg_graph, is_path = r.rop_searcher.get_trans_reg_graph()
        for dest in is_path.keys():
            print(f"dest: {dest}: {is_path[dest]}\n")

        print(f"======= register transition graph created in {time.time() - t} seconds =======\n\n")

    def _mov_rr_tests(r: ROP_util):

        print(f"======= MOV_RR search test =======\n")

        print("r8 <- rdx\n\n")

        gs = r.search_chain(wanted_effects = "r8 = rdx", max_stack_byte_size = 2 ** 63, max_search_cnt = 1,
                            only_gadgets = False)
        for g in gs:
            g.show(capstone_handle=r.rop_searcher.capstone)
            print("")

        print("\nrcx <- r15, fixed rbx\n\n")

        gs = r.search_chain(wanted_effects = "rcx = r15", max_stack_byte_size = 2 ** 63, max_search_cnt = 1,
                            only_gadgets = False, fixed_regs=["rbx"])
        for g in gs:
            g.show(capstone_handle=r.rop_searcher.capstone)
            print("")

        print("\nrax <- rbp, fixed r9 and rbx\n\n")

        gs = r.search_chain(wanted_effects = "rax = rbp", max_stack_byte_size = 2 ** 63, max_search_cnt = 1,
                            only_gadgets = False, fixed_regs=["r9", "rbx"])
        for g in gs:
            g.show(capstone_handle=r.rop_searcher.capstone)
            print("")

    def _search_by_subst_tests(r: ROP_util):
        
        print(f"======= ARITH search by (register-only) substitution test =======")

        print("rdx <- rcx + 0x10\n\n")

        gs = r.search_chain(wanted_effects = "rdx = rcx + 0x10")
        for g in gs:
            g.show(capstone_handle=r.rop_searcher.capstone)
            print("")

        print("rax <- rbx + r8\n\n")

        gs = r.search_chain(wanted_effects = "rax = rbx + r8")
        for g in gs:
            g.show(capstone_handle=r.rop_searcher.capstone)
            print("")

        print("r8 <- rdx xor rbx, fixed r10\n")

        gs = r.search_chain(wanted_effects = "r8 = rdx ^ rbx", fixed_regs=["r10"])
        for g in gs:
            g.show(capstone_handle=r.rop_searcher.capstone)
            print("")

    def _search_by_subst_adv_tests(r: ROP_util):
        
        print(f"======= ARITH search by (register and constants) substitution test =======")

        print("rax <- rdx + 0xdeadbeef\n\n")

        gs = r.search_chain(wanted_effects = "rax = rdx + 0xdeadbeef")
        for g in gs:
            g.show(capstone_handle=r.rop_searcher.capstone)
            print("")

        print("rax <- r9 & 0xcaffee, fixed reg r8\n\n")

        gs = r.search_chain(wanted_effects = "rax = r9 & 0xcaffee", fixed_regs=["r8"])
        for g in gs:
            g.show(capstone_handle=r.rop_searcher.capstone)
            print("")

        print("rax <- rcx + rax + 0xdeadbeef\n\n")

        gs = r.search_chain(wanted_effects = "rax = rcx + rax + 0xdeadbeef")
        for g in gs:
            g.show(capstone_handle=r.rop_searcher.capstone)
            print("")

    bin_ = "/usr/lib/x86_64-linux-gnu/libc-2.31.so"

    print(f"======= running roputils.py test =======")

    t = time.time()

    r = ROP_util(bin_, Platform.X86_64, scout=False)   
    r.disable_bruteforce() 
    r.scout_for_gadgets('complete')

    r.stats()

    #_transition_graph(r)
    _mov_rr_tests(r)
    _search_by_subst_tests(r)
    _search_by_subst_adv_tests(r)

if __name__ == "__main__":
    _test()
