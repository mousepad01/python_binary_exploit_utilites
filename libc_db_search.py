import requests
import json
from utils import to_bytes, from_bytes

class niklasb_libc_db:

    def __init__(self):

        self.db_url = "https://libc.rip/api"
        self.header = {"Content-Type": "application/json"}
    
    # symbols_dict: {"symbol_name": address(as int)}
    def search_libc_version(self, symbols_dict: dict):

        req_data = {"symbols": {}}
        for sym_name, sym_addr in symbols_dict.items():
            req_data["symbols"].update({sym_name: hex(sym_addr)[-3:]})

        req_url = f"{self.db_url}/find"

        res = requests.post(headers=self.header, url=req_url, data=json.dumps(req_data))
        res = json.loads(res.text)

        if isinstance(res, list):
            return [info["id"] for info in res]
        else:
            return [res["id"]]

    # symbols_dict: {"symbol_name": address(as int)}
    def search_libc_info(self, symbols_dict: dict):

        req_data = {"symbols": {}}
        for sym_name, sym_addr in symbols_dict.items():
            req_data["symbols"].update({sym_name: hex(sym_addr)[-3:]})

        req_url = f"{self.db_url}/find"

        res = requests.post(headers=self.header, url=req_url, data=json.dumps(req_data))
        res = json.loads(res.text)

        if isinstance(res, dict):
            return [res]
        return res

    # symbols_list: ["symbol_name"]
    def search_symbol_by_libc_version(self, libc_version, symbols_list):

        req_data = {"symbols": symbols_list}

        req_url = f"{self.db_url}/libc/{libc_version}"

        res = requests.post(headers=self.header, url=req_url, data=json.dumps(req_data))
        res = json.loads(res.text)
        
        return {sym_name: int(res["symbols"][sym_name], 16) for sym_name in symbols_list}

# currently only https://github.com/niklasb/libc-database/tree/master/searchengine supported

class LIBC_util:

    def __log_info(self, msg):

        if self.print_log is True:
            print(f"[i] [{self.session_name}] {msg}")

    def __log_warning(self, msg):

        if self.print_log is True:
            print(f"[!] [{self.session_name}] {msg}")

    def __log_success(self, msg):

        if self.print_log is True:
            print(f"[*] [{self.session_name}] {msg}")

    SUPPORTED_LIBC_DB = ["nikslab-libc-database"]

    @staticmethod
    def __validate_libc_db(db_name):
        return db_name in LIBC_util.SUPPORTED_LIBC_DB

    def __init_db_handle(self):

        if self.db_name == "nikslab-libc-database":
            self.db_handle = niklasb_libc_db()

    def __init__(self, db_name="nikslab-libc-database", print_log=True, session_name=None):

        if LIBC_util.__validate_libc_db(db_name) is False:
            raise RuntimeError("Only https://github.com/niklasb/libc-database API supported at this time!")

        self.db_name = db_name
        self.__init_db_handle()

        self.print_log = print_log
        self.session_name = session_name

        self.libc_version = None

    def search_libc_version(self, symbols):

        self.__log_info("Searching for libc version(s)...")
        self.libc_version = self.db_handle.search_libc_version(symbols)

        if len(self.libc_version) == 0:
            self.__log_warning("No libc version was found; returning empty list")
            return None

        self.__log_success(f"Found {len(self.libc_version)} libc version(s): {self.libc_version}")
        return self.libc_version

    def search_symbols(self, symbols_list, libc_version=None):
        
        if libc_version is None:
            if self.libc_version is None:
                raise RuntimeError("Cannot search any symbol because libc version is not set")
            libc_version = self.libc_version

        self.__log_info(f"Searching for symbols {symbols_list}...")

        searched_symbols = {ver_name: None for ver_name in libc_version}
        for ver_name in libc_version:
            
            search_res = self.db_handle.search_symbol_by_libc_version(ver_name, symbols_list)

            if len(search_res) == 0:
                self.__log_warning(f"Could not find searched symbols for version {ver_name}")
            else:
                searched_symbols[ver_name] = search_res

        self.__log_success("Done searching for symbols")

        return searched_symbols
