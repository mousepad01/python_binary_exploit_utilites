
class Platform:

    class _Platform:

        def __init__(self, arch):

            self.type = arch

            if arch == "x86_64":
                
                self.SUPPORTED_REGS = ["rax", "rbx", "rcx", "rdx", "rsi", "rdi", "rbp",
                                        "r8", "r9", "r10", "r11", "r12", "r13", "r14", "r15"]

                self.IGNORED_INSTR_MNEMONICS = ["endbr64", "clc", "cld", "cldemote", "clflush", "clflushopt", 
                                                "cli", "clts", "clwb", "cmc", "fnop", "vzeroupper", "nop"]

                self.ENDPOINTS = { b'\xc3': "ret", b'\xff\xe0': "jmp rax", b'\xff\xe3': "jmp rbx", b'\xff\xe1': "jmp rcx", 
                    b'\xff\xe2': "jmp rdx", b'\xff\xe5': "jmp rbp", b'\xff\xe6': "jmp rsi", b'\xff\xe7': "jmp rdi", 
                    b'\x41\xff\xe0': "jmp r8", b'\x41\xff\xe1': "jmp r9", b'\x41\xff\xe2': "jmp r10", b'\x41\xff\xe3': "jmp r11", 
                    b'\x41\xff\xe4': "jmp r12", b'\x41\xff\xe5': "jmp r13", b'\x41\xff\xe6': "jmp r14", b'\x41\xff\xe7': "jmp r15" }

                self.RET_OPCODE = b'\xc3'

                # TODO integrate in code, currently unused
                self.use_z3 = True

            elif arch == "arm64":

                self.SUPPORTED_REGS = ["x0", "x1", "x2", "x3", "x4", "x5", "x6", "x7", "x8", "x9", 
                                        "x10", "x11", "x12", "x13", "x14", "x15", "x16", "x17", "x18", "x19",
                                        "x20", "x21", "x22", "x23", "x24", "x25", "x26", "x27", "x28", "x29", "x30"]
                
                # NOTE: register XZR is NOT SUPPORTED
                #       the reason is that it is (almost exclusively)
                #       used in compare / store instructions
                #       (or other unsupported instructions)
                #       taking it into account would vastly complicate the analyse_instr() code
                #       so it is currently excluded

                self.SUPPORTED_EXTENDED_REGS = self.SUPPORTED_REGS + \
                                                ["w" + reg[1:] for reg in self.SUPPORTED_REGS] + \
                                                ["sp"]

                self.IGNORED_INSTR_MNEMONICS = []

                self.ENDPOINTS = ["br", "blr", "ret"]

                self.use_z3 = True

            else:
                raise RuntimeError(f"Unsupported platform {arch}")

    X86_64 = _Platform("x86_64")
    ARM64 = _Platform("arm64")
