from roputils import *

import time
import pickle
import matplotlib.pyplot as plt

BINPATH_X86 = "./stats_binaries/x86_64/"
BINPATH_ARM = "./stats_binaries/arm64/"
STATSPATH_X86 = "../rop_payload_gen_doc/stats_plots/x86/"
STATSPATH_ARM = "../rop_payload_gen_doc/stats_plots/arm/"
STATSPATH = "../rop_payload_gen_doc/stats_plots/"

X86_BINS = ["ld-2.31.so",
            "libc-2.31.so",
            "libcrypt.so.1.1.0",
            "libcurl.so.4.6.0",
            "libm-2.31.so",
            "libpthread-2.31.so"]

ARM_BINS = ["ld-2.33.so",
            "libc-2.33.so",
            "libcrypt.so.1.1.0",
            "libcurl.so.4.7.0",
            "libm-2.33.so",
            "libpthread-2.33.so"]

def _stats_x86_64():

    def _transition_graph(r: ROP_util):

        print(f"======= making register transition graph =======\n\n")

        t = time.time()

        trans_reg_graph, is_path = r.rop_searcher.get_trans_reg_graph()
        for dest in is_path.keys():
            print(f"dest: {dest}: {is_path[dest]}\n")

        print(f"======= register transition graph created in {time.time() - t} seconds =======\n\n")

    def _mov_rr_tests(r: ROP_util):

        print(f"======= MOV_RR search test =======\n")

        print("r8 <- rdx\n\n")

        t = time.time()

        gs = r.search_chain(wanted_effects = "r8 = rdx", max_stack_byte_size = 2 ** 63, max_search_cnt = 1,
                            only_gadgets = False)
        for g in gs:
            g.show(capstone_handle=r.rop_searcher.capstone)
            print("")

        print("\nrcx <- r15, fixed rbx\n\n")

        t = time.time()

        gs = r.search_chain(wanted_effects = "rcx = r15", max_stack_byte_size = 2 ** 63, max_search_cnt = 1,
                            only_gadgets = False, fixed_regs=["rbx"])
        for g in gs:
            g.show(capstone_handle=r.rop_searcher.capstone)
            print("")

        print("\nrax <- rbp, fixed r9 and rbx\n\n")

        t = time.time()

        gs = r.search_chain(wanted_effects = "rax = rbp", max_stack_byte_size = 2 ** 63, max_search_cnt = 1,
                            only_gadgets = False, fixed_regs=["r9", "rbx"])
        for g in gs:
            g.show(capstone_handle=r.rop_searcher.capstone)
            print("")

    def _search_by_subst_tests(r: ROP_util):
        
        print(f"======= ARITH search by (register-only) substitution test =======")

        print("rdx <- rcx + 0x10\n\n")

        gs = r.search_chain(wanted_effects = "rdx = rcx + 0x10")
        for g in gs:
            g.show(capstone_handle=r.rop_searcher.capstone)
            print("")

        print("rax <- rbx + r8\n\n")

        gs = r.search_chain(wanted_effects = "rax = rbx + r8")
        for g in gs:
            g.show(capstone_handle=r.rop_searcher.capstone)
            print("")

        print("r8 <- rdx xor rbx, fixed r10\n")

        gs = r.search_chain(wanted_effects = "r8 = rdx ^ rbx", fixed_regs=["r10"])
        for g in gs:
            g.show(capstone_handle=r.rop_searcher.capstone)
            print("")

    def _search_by_subst_adv_tests(r: ROP_util):
        
        print(f"======= ARITH search by (register and constants) substitution test =======")

        print("rax <- rdx + 0xdeadbeef\n\n")

        gs = r.search_chain(wanted_effects = "rax = rdx + 0xdeadbeef")
        for g in gs:
            g.show(capstone_handle=r.rop_searcher.capstone)
            print("")

        print("rax <- r9 & 0xcaffee, fixed reg r8\n\n")

        gs = r.search_chain(wanted_effects = "rax = r9 & 0xcaffee", fixed_regs=["r8"])
        for g in gs:
            g.show(capstone_handle=r.rop_searcher.capstone)
            print("")

        print("rax <- rcx + rax + 0xdeadbeef\n\n")

        gs = r.search_chain(wanted_effects = "rax = rcx + rax + 0xdeadbeef")
        for g in gs:
            g.show(capstone_handle=r.rop_searcher.capstone)
            print("")

    r = ROP_util(bin, Platform.X86_64)   
    r.disable_bruteforce() 
    r.scout_for_gadgets()

    for ef in ["LOAD_S", "LOAD_CT", "MOV_RR", "ARITH"]:
        for reg in r.platform.SUPPORTED_REGS:
            print(f"{ef}, out reg {reg}: {len(r.rop_searcher.effects_to_gadgets[ef][reg])}")

def _stats_arm64():

    def _transgraph_tests(r: ROP_util):
        
        print(f"======= making register transition graph =======\n\n")

        t = time.time()

        trans_reg_graph, is_path = r.rop_searcher.get_trans_reg_graph()
        for dest in is_path.keys():
            print(f"dest: {dest}: {is_path[dest]}\n")

        print(f"======= register transition graph created in {time.time() - t} seconds =======\n\n")

        print(f"======= call to _search_arith_to_mov(100) =======\n\n")

        t = time.time()

        r.rop_searcher.search_arith_to_mov(100)

        print(f"======= done; {time.time() - t} seconds =======\n\n")

    def _op_stats(r: ROP_util):

        ef_cnt = 0
        gs = []
        g_ = False

        for g in r.rop_searcher.gadgets:

            g_ = False

            for ef in g.effects:

                if ef.params[0].is_op():
                    print(ef.params[0].type)
                    print(ef)

            if g_ is True:
                gs.append(g)

    def _trans_graph_stats(r: ROP_util):

        print(f"======= making register transition graph =======\n\n")

        logfile = open("./tg_stats", "w")

        t0 = time.time()

        trans_reg_graph, is_path = r.rop_searcher.get_trans_reg_graph()

        print(f"======= trans reg graph built in {time.time() - t0} seconds =======\n\n")

        for fixed_arg, subg_is_path in is_path.items():
            print(f"fixed arg {fixed_arg}", file=logfile)

            for dest, srcs in subg_is_path.items():
                print(f"dest {dest}: ", end="", file=logfile)

                for src, ok in srcs.items():

                    if src == dest:
                        continue

                    if ok:
                        print(f"{src}({len(trans_reg_graph[fixed_arg][dest][src])})", end=" ", file=logfile)

                print("", file=logfile)

            print("", file=logfile)

    def _mov_rr_tests(r: ROP_util):

        print(f"======= MOV_RR search test =======\n")

        print("x20 <- x7\n\n")

        t = time.time()

        gs = r.search_chain(wanted_effects = "x20 = x7", max_stack_byte_size = 2 ** 63, max_search_cnt = 1,
                            only_gadgets = False)
        for g in gs:
            g.show(capstone_handle=r.rop_searcher.capstone)
            print("")

        print("\nx3 <- x19, fixed x0 and x17\n\n")

        t = time.time()

        gs = r.search_chain(wanted_effects = "x3 = x19", max_stack_byte_size = 2 ** 63, max_search_cnt = 1,
                            only_gadgets = False, fixed_regs=["x0", "x17"])
        for g in gs:
            g.show(capstone_handle=r.rop_searcher.capstone)
            print("")

        print("\nx14 <- x15, fixed x10 and x19 (should not find anything?)\n\n")

        t = time.time()

        gs = r.search_chain(wanted_effects = "x14 = x15", max_stack_byte_size = 2 ** 63, max_search_cnt = 1,
                            only_gadgets = False, fixed_regs=["x10", "x19"])
        for g in gs:
            g.show(capstone_handle=r.rop_searcher.capstone)
            print("")

        print("\nx2 <- x6, fixed x13 and x2\n\n")

        t = time.time()

        gs = r.search_chain(wanted_effects = "x2 = x6", max_stack_byte_size = 2 ** 63, max_search_cnt = 1,
                            only_gadgets = False, fixed_regs=["x13", "x2"])
        for g in gs:
            g.show(capstone_handle=r.rop_searcher.capstone)
            print("")

        print("\nx21 <- x28, fixed x14 and x17\n\n")

        t = time.time()

        gs = r.search_chain(wanted_effects = "x21 = x28", max_stack_byte_size = 2 ** 63, max_search_cnt = 1,
                            only_gadgets = False, fixed_regs=["x14", "x17"])
        for g in gs:
            g.show(capstone_handle=r.rop_searcher.capstone)
            print("")

    def _search_by_subst_tests(r: ROP_util):
        
        print(f"======= ARITH search by (register-only) substitution test =======")

        print("x2 <- x0 + 0x10\n\n")

        gs = r.search_chain(wanted_effects = "x2 = x0 + 0x10")
        for g in gs:
            g.show(capstone_handle=r.rop_searcher.capstone)
            print("")

        print("x2 <- x0 + 0x10, fixed reg x19\n\n")

        gs = r.search_chain(wanted_effects = "x2 = x0 + 0x10", fixed_regs=["x19"])
        for g in gs:
            g.show(capstone_handle=r.rop_searcher.capstone)
            print("")

        print("x2 <- x1 xor x0\n")

        gs = r.search_chain(wanted_effects = "x2 = x1 ^ x0")
        for g in gs:
            g.show(capstone_handle=r.rop_searcher.capstone)
            print("")

    def _search_by_subst_adv_tests(r: ROP_util):
        
        print(f"======= ARITH search by (register and constants) substitution test =======")

        print("x2 <- x0 + 0xdeadbeef\n\n")

        gs = r.search_chain(wanted_effects = "x2 = x0 + 0xdeadbeef")
        for g in gs:
            g.show(capstone_handle=r.rop_searcher.capstone)
            print("")

        print("x1 <- x3 & 0xcaffee, fixed reg x19\n\n")

        gs = r.search_chain(wanted_effects = "x1 = x3 & 0xcaffee", fixed_regs=["x19"])
        for g in gs:
            g.show(capstone_handle=r.rop_searcher.capstone)
            print("")

        print("x2 <- x0 + x1 + 0xdeadbeef\n\n")

        gs = r.search_chain(wanted_effects = "x2 = x0 + x1 + 0xdeadbeef")
        for g in gs:
            g.show(capstone_handle=r.rop_searcher.capstone)
            print("")

    r = ROP_util(bin, Platform.ARM64)  
    r.disable_bruteforce() 
    r.scout_for_gadgets()

    for ef in ["LOAD_S", "LOAD_CT", "MOV_RR", "ARITH"]:
        for reg in r.platform.SUPPORTED_REGS:
            print(f"{ef}, out reg {reg}: {len(r.rop_searcher.raw_effects_to_gadgets[ef][reg])} | {len(r.rop_searcher.effects_to_gadgets[ef][reg])}")

    r.rop_searcher.valid_stats()

def gadget_distribution_stats():

    EFFECT_TYPES = ["LOAD_S", "LOAD_CT", "MOV_RR", "ARITH"]

    def _x86():
        
        distrib_x86 = \
        {
            _bins:
            {
                _eftype:
                {
                    reg: 0 for reg in Platform.X86_64.SUPPORTED_REGS
                }
                for _eftype in EFFECT_TYPES
            }
            for _bins in ["libc", "other binaries (summed)"]
        }

        r_x86 = ROP_util(BINPATH_X86 + X86_BINS[1], Platform.X86_64)   
        r_x86.scout_for_gadgets()
        
        for ef in EFFECT_TYPES:
            for reg in Platform.X86_64.SUPPORTED_REGS:
                distrib_x86["libc"][ef][reg] += len(r_x86.rop_searcher.effects_to_gadgets[ef][reg])

        for binname in X86_BINS:
            if binname != X86_BINS[1]:

                r_x86 = ROP_util(BINPATH_X86 + binname, Platform.X86_64)   
                r_x86.scout_for_gadgets()
                
                for ef in EFFECT_TYPES:
                    for reg in Platform.X86_64.SUPPORTED_REGS:
                        distrib_x86["other binaries (summed)"][ef][reg] += len(r_x86.rop_searcher.effects_to_gadgets[ef][reg])

        g_distrib_stats = pickle.dumps(distrib_x86)
        with open(STATSPATH_X86 + "g_distrib_x86.bin", "wb+") as f_:
            f_.write(g_distrib_stats)

    def _arm():

        ARM_SUPPORTED_REGS = deepcopy(Platform.ARM64.SUPPORTED_REGS)
        ARM_SUPPORTED_REGS.remove("x30")
        
        distrib_arm = \
        {
            _bins:
            {
                _eftype:
                {
                    reg: 0 for reg in ARM_SUPPORTED_REGS
                }
                for _eftype in EFFECT_TYPES
            }
            for _bins in ["libc", "other binaries (summed)"]
        }

        r_arm = ROP_util(BINPATH_ARM + ARM_BINS[1], Platform.ARM64)   
        r_arm.scout_for_gadgets()
        
        for ef in EFFECT_TYPES:
            for reg in ARM_SUPPORTED_REGS:
                distrib_arm["libc"][ef][reg] += len(r_arm.rop_searcher.effects_to_gadgets[ef][reg])

        for binname in ARM_BINS:
            if binname != ARM_BINS[1]:

                r_arm = ROP_util(BINPATH_ARM + binname, Platform.ARM64)   
                r_arm.scout_for_gadgets()
                
                for ef in EFFECT_TYPES:
                    for reg in ARM_SUPPORTED_REGS:
                        distrib_arm["other binaries (summed)"][ef][reg] += len(r_arm.rop_searcher.effects_to_gadgets[ef][reg])

        g_distrib_stats = pickle.dumps(distrib_arm)
        with open(STATSPATH_ARM + "g_distrib_arm.bin", "wb+") as f_:
            f_.write(g_distrib_stats)

    def _plot_x86():
        
        g_distrib_stats = None
        with open(STATSPATH_X86 + "g_distrib_x86.bin", "rb") as f_:
            g_distrib_stats = f_.read()

        g_distrib_stats = pickle.loads(g_distrib_stats)

        for _bins in ["libc", "other binaries (summed)"]:

            fig, regs_to_fr = plt.subplots(len(EFFECT_TYPES))
    
            for idx, _eftype in enumerate(EFFECT_TYPES):
                
                regs_to_fr[idx].set_title(_eftype)
                bars = regs_to_fr[idx].bar(
                                            [r for r in g_distrib_stats[_bins][_eftype].keys()],
                                            [fr for fr in g_distrib_stats[_bins][_eftype].values()]
                                        )

                regs_to_fr[idx].bar_label(bars)

            fig.tight_layout()
            #fig.suptitle(_bins)

        plt.show()

    def _plot_arm():
        
        g_distrib_stats = None
        with open(STATSPATH_ARM + "g_distrib_arm.bin", "rb") as f_:
            g_distrib_stats = f_.read()

        g_distrib_stats = pickle.loads(g_distrib_stats)

        for _bins in ["libc", "other binaries (summed)"]:

            fig, regs_to_fr = plt.subplots(len(EFFECT_TYPES))
    
            for idx, _eftype in enumerate(EFFECT_TYPES):
                
                regs_to_fr[idx].set_title(_eftype)
                bars = regs_to_fr[idx].bar(
                                            [r for r in g_distrib_stats[_bins][_eftype].keys()],
                                            [fr for fr in g_distrib_stats[_bins][_eftype].values()]
                                        )
                regs_to_fr[idx].bar_label(bars)

            fig.tight_layout()
            #fig.suptitle(_bins)

        plt.show()

    #_x86()
    #_arm()

    #_plot_x86()
    #_plot_arm()

    return None

def average_elements_stats():

    constant_el_cnt_types = {"ct_val", "64b_stack_val", "reg_in", "reg_out"}
    ops = {"add", "sub", "and", "or", "xor", "neg", "mul", "lsh", "rsh"}

    def _el_cnt(e: Structured_element):

        if e is None:
            return 0

        if e.type in constant_el_cnt_types:
            return 1

        if e.type == "deref":
            return _el_cnt(e.info["expr"])

        if e.type in ops:
            return _el_cnt(e.info["term_1"]) + _el_cnt(e.info["term_2"])

    assert(len(X86_BINS) == len(ARM_BINS))
    for bin_idx in range(len(X86_BINS)):

        r = {"x86": ROP_util(BINPATH_X86 + X86_BINS[bin_idx], Platform.X86_64),
                "arm": ROP_util(BINPATH_ARM + ARM_BINS[bin_idx], Platform.ARM64)}

        r["x86"].scout_for_gadgets()
        r["arm"].scout_for_gadgets()

        res = \
            {
                _arch:
                {   
                    l:
                    {
                        "peref": 0,
                        "perefraw": 0,
                        "perg": 0,
                        "pergraw": 0,
                        "efcnt": 0,
                        "efcntraw": 0,
                        "gcnt": 0,
                        "gcntraw": 0
                    }
                    for l in {"1g", "2g"}
                }
                for _arch in {"x86", "arm"}
            }

        # arm raw valid gadgets

        for g in r["arm"].rop_searcher.raw_gadgets:
            if g.valid_jump is True and g.valid_stack_access is True:
                
                res["arm"]["1g"]["gcntraw"] += 1

                for ef in g.effects:
                    ecnt = _el_cnt(ef.params[0])

                    res["arm"]["1g"]["pergraw"] += ecnt

                    if ef.type == "ARITH":

                        res["arm"]["1g"]["efcntraw"] += 1
                        res["arm"]["1g"]["perefraw"] += ecnt

        # 1 gadget chains 
        for _arch in ["x86", "arm"]:
            for g in r[_arch].rop_searcher.gadgets:
                
                res[_arch]["1g"]["gcnt"] += 1

                for ef in g.effects:
                    ecnt = _el_cnt(ef.params[0])

                    res[_arch]["1g"]["perg"] += ecnt

                    if ef.type == "ARITH":

                        res[_arch]["1g"]["efcnt"] += 1
                        res[_arch]["1g"]["peref"] += ecnt

        # 2 gadget chains
        for _arch in ["x86", "arm"]:
            for g1 in r[_arch].rop_searcher.gadgets:
                for g2 in r[_arch].rop_searcher.gadgets:

                    ch = g1.join(g2)
                    if ch is None:
                        continue

                    res[_arch]["2g"]["gcnt"] += 1

                    for ef in ch.effects:
                        ecnt = _el_cnt(ef.params[0])

                        res[_arch]["2g"]["perg"] += ecnt

                        if ef.type == "ARITH":

                            res[_arch]["2g"]["efcnt"] += 1
                            res[_arch]["2g"]["peref"] += ecnt

                    ch.remove_stack_ids()

        with open(STATSPATH + f"avg_elem_{bin_idx}.bin", "wb+") as f:
            f.write(pickle.dumps(res))

        for _arch in ["x86", "arm"]:
            for l in ["1g", "2g"]:

                res[_arch][l]["peref"] /= res[_arch][l]["efcnt"]
                res[_arch][l]["perg"] /= res[_arch][l]["gcnt"]
                
                if res[_arch][l]["efcntraw"] != 0:

                    res[_arch][l]["perefraw"] /= res[_arch][l]["efcntraw"]
                    res[_arch][l]["pergraw"] /= res[_arch][l]["gcntraw"]

        print(res)

        print(f'{bin_idx}: {res["x86"]["1g"]["peref"]} {res["arm"]["1g"]["perefraw"]} {res["arm"]["1g"]["peref"]} {res["x86"]["2g"]["peref"]} {res["arm"]["2g"]["peref"]}')
        print(f'{bin_idx}: {res["x86"]["1g"]["perg"]} {res["arm"]["1g"]["pergraw"]} {res["arm"]["1g"]["perg"]} {res["x86"]["2g"]["perg"]} {res["arm"]["2g"]["perg"]}')

if __name__ == "__main__":
    #gadget_distribution_stats()
    average_elements_stats()
    #_stats_x86_64()
    #_stats_arm64()
