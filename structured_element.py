# TODO add support for mul and shift left / right operations

# class that stores any kind of entity that can have a value
# eg. stack bytes, registers, register value "snapshot" at some point of execution, and so on
# the design choice of using such an ambiguous class 
# is based on the fact that the implementation is way easier to understand, to extend, or to modify
# compared to the situation in which every use case of this class would get its own class
class Structured_element:

    # dictionary of currently used structured elements types
    # {"ELEMENT_TYPE": [info param 1 type / info param 1 name, ...]}
    # NOTE: the fields described here only represent the keys of the self.info dict
    #       populating it with the corresponding (valid) values is the programmer's responsability
    ELEMENT_TYPES = {"64b_stack_val": ["id"],               # integer value from the stack, pointed by an id
                        "ct_val": ["value"],                # integer constant (non-stack / non-register) value

                        "reg_in": ["reg_name"],             # register value at the beginning of a gadget / chain
                        "reg_out": ["reg_name"],            # register value after executing a gadget / chain
                        
                        "add": ["term_1", "term_2"],        # arithmetic operations (can be recursive)
                        "sub": ["term_1", "term_2"],                    
                        "and": ["term_1", "term_2"], 
                        "or": ["term_1", "term_2"],
                        "xor": ["term_1", "term_2"],
                        "neg": ["term_1", "term_2"],        # LOGICAL NOT; for negation, term2 will always be None

                        "64b_stack_pad": []                 # marks padding (random value) for the stack view
                    }
    
    @classmethod
    def instantiate_structured_element(cls, element_type: str):

        if element_type not in cls.ELEMENT_TYPES.keys():
            raise RuntimeError(f"Cannot automatically instantiate Structured_element with type {element_type}")
        
        element = cls(element_type)
        for info_field in cls.ELEMENT_TYPES[element_type]:
            element.info.update({info_field: None})

        return element
    
    def __init__(self, element_type: str):
        self.type = element_type
        self.info = {}

    def is_op(self):
        return self.type in ["add", "sub", "and", "or", "xor", "neg"]

    # mostly for debugging purposes
    def __str__(self):
        info_s = {str(k): str(v) for k, v in self.info.items()}
        return f"element type {self.type}, info {info_s}"

class Structured_element_ARM64:

    ELEMENT_TYPES = Structured_element.ELEMENT_TYPES.copy()
    ELEMENT_TYPES.update({"mul": ["term_1", "term_2"],       
                            "lsh": ["term_1", "term_2"],                    
                            "rsh": ["term_1", "term_2"]})

    def is_op(self):
        return self.type in ["add", "sub", "and", "or", "xor", "neg",
                                "lsh", "rsh", "mul"]
