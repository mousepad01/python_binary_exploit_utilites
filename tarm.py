from roputils import ROP_util
from rop_platform import Platform
from rand import random

import time

def _test():

    def _transgraph_tests(r: ROP_util):
        
        print(f"======= making register transition graph =======\n\n")

        t = time.time()

        trans_reg_graph, is_path = r.rop_searcher.get_trans_reg_graph()
        for dest in is_path.keys():
            print(f"dest: {dest}: {is_path[dest]}\n")

        print(f"======= register transition graph created in {time.time() - t} seconds =======\n\n")

        print(f"======= call to _search_arith_to_mov(100) =======\n\n")

        t = time.time()

        r.rop_searcher._search_arith_to_mov(100)

        print(f"======= done; {time.time() - t} seconds =======\n\n")

    def _op_stats(r: ROP_util):

        ef_cnt = 0
        gs = []
        g_ = False

        for g in r.rop_searcher.gadgets:

            g_ = False

            for ef in g.effects:

                if ef.params[0].is_op():
                    print(ef.params[0].type)
                    print(ef)

            if g_ is True:
                gs.append(g)

    def _trans_graph_stats(r: ROP_util):
        
        print(f"======= making register transition graph =======\n\n")

        t = time.time()

        trans_reg_graph, is_path = r.rop_searcher.get_trans_reg_graph()

        t0 = time.time()
        cnt_ = 0

        for r0 in r.platform.SUPPORTED_REGS:
            for r1 in r.platform.SUPPORTED_REGS:

                print(r0, r1)

                if is_path[r1][r0]:

                    for ch in r.rop_searcher.transition_chain_generator(r1, r0, trans_reg_graph, is_path, 0x800):
                        cnt_ += 1

        t0 = time.time() - t0

        print(f"======= all chains for transition yielded in {t0} seconds ({cnt_} chains) =======\n\n")
    
    def _transition_graph(r: ROP_util):

        print(f"======= making register transition graph =======\n\n")

        t = time.time()

        trans_reg_graph, is_path = r.rop_searcher.get_trans_reg_graph()
        for dest in is_path.keys():
            print(f"dest: {dest}: {is_path[dest]}\n")

        print(f"======= register transition graph created in {time.time() - t} seconds =======\n\n")

    def _search_chain_ex0(r: ROP_util):

        print(f"======= searching for gadgets =======")

        print("load in x0 0x000000004f3f2f1f\n\n")

        t = time.time()

        gs = r.search_chain(wanted_effects = "x0 = 0x000000004f3f2f1f", max_stack_byte_size = 300, max_search_cnt = 5,
                            only_gadgets = True)
        for g in gs:
            g.show(capstone_handle=r.rop_searcher.capstone)
            print()
            pass

    def _search_chain_ex1(r: ROP_util):

        print(f"======= searching for gadgets =======")

        print("load in x0 0x000000000000001f\n\n")

        t = time.time()

        gs = r.search_chain(wanted_effects = "x0 = 0x000000000000001f", max_stack_byte_size = 300, max_search_cnt = 10,
                            only_gadgets = True)
        for g in gs:
            g.show(capstone_handle=r.rop_searcher.capstone)
            print()
            pass

    def _search_chain_ex2(r: ROP_util):

        print(f"======= searching for gadgets =======")

        print("x2 <- x1 + x4\n\n")

        t = time.time()

        gs = r.search_chain(wanted_effects = "x2 = x1 + x4", max_stack_byte_size = 300, max_search_cnt = 3,
                            only_gadgets = True)
        for g in gs:
            g.show(capstone_handle=r.rop_searcher.capstone)
            print()

    def _search_chain_ex3(r: ROP_util):

        print(f"======= searching for gadgets =======")

        print("x20 <- x7 xor x0\n\n")

        t = time.time()

        gs = r.search_chain(wanted_effects = "x20 = x7 ^ x0", max_stack_byte_size = 300, max_search_cnt = 1,
                            only_gadgets = True)
        for g in gs:
            g.show(capstone_handle=r.rop_searcher.capstone)
            print()

    def _search_chain_ex4(r: ROP_util):

        print(f"======= searching for gadgets =======")

        print("x20 <- x7\n\n")

        t = time.time()

        gs = r.search_chain(wanted_effects = "x20 = x7", max_stack_byte_size = 2 ** 63, max_search_cnt = 2,
                            only_gadgets = False)
        for g in gs:
            g.show(capstone_handle=r.rop_searcher.capstone)
            print()

    def _search_chain_ex5(r: ROP_util):

        print(f"======= searching for gadgets =======")

        print("x2 <- x0 + 0x10\n\n")

        t = time.time()

        gs = r.search_chain(wanted_effects = "x2 = x0 + 0x10", max_stack_byte_size = 2 ** 63, max_search_cnt = 2,
                            only_gadgets = False)
        for g in gs:
            g.show(capstone_handle=r.rop_searcher.capstone)
            print()

    def _search_chain_ex6(r: ROP_util):

        print(f"======= searching for gadgets =======")

        print("x2 <- x1, x3 = 0x00007ffff7abcd00, x4 = 0x00007ffff7abcd00\n\n")

        t = time.time()

        gs = r.search_chain(wanted_effects = "x2 = x1, x3 = 0x00007ffff7abcd00, x4 = 0x00007ffff7abcd00", max_stack_byte_size = 2 ** 63, max_search_cnt = 2,
                            only_gadgets = False)
        for g in gs:
            g.show(capstone_handle=r.rop_searcher.capstone)
            print()

    def _search_chain_ex7(r: ROP_util):

        print(f"======= searching for gadgets =======")

        print("x14 = 0x00007ffff7abcd00\n\n")

        t = time.time()

        gs = r.search_chain(wanted_effects = "x14 = 0x00007ffff7abcd00", max_stack_byte_size = 2 ** 63, max_search_cnt = 2,
                            only_gadgets = False)
        for g in gs:
            g.show(capstone_handle=r.rop_searcher.capstone)
            print()

    random.seed(0)

    # bin = "/lib/aarch64-linux-gnu/libc.so.6"
    bin = "./libc_2.33_arm64"

    print(f"======= running roputils.py test =======")

    t = time.time()

    r = ROP_util(bin, Platform.ARM64)   
    r.scout_for_gadgets()

    for ef in ["LOAD_S", "LOAD_CT", "MOV_RR", "ARITH"]:
        for reg in r.platform.SUPPORTED_REGS:
            print(f"{ef}, out reg {reg}: {len(r.rop_searcher.raw_effects_to_gadgets[ef][reg])} | {len(r.rop_searcher.effects_to_gadgets[ef][reg])}")

    r.rop_searcher.valid_stats()

    #_op_stats(r)
    #_trans_graph_stats(r)
    #_transgraph_tests(r)
    #_transition_graph(r)
    _search_chain_ex0(r)
    _search_chain_ex1(r)
    _search_chain_ex2(r)
    _search_chain_ex3(r)
    #_search_chain_ex4(r)
    #_search_chain_ex5(r)
    #_search_chain_ex6(r)
    #_search_chain_ex7(r)

if __name__ == "__main__":
    _test()
