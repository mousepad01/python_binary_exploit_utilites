from roputils import ROP_util
from rop_platform import Platform
from rand import random
from sys import stdout, argv

import time

def _test():

    def _transgraph_tests(r: ROP_util):
        
        print(f"======= making register transition graph =======\n\n")

        t = time.time()

        trans_reg_graph, is_path = r.rop_searcher.get_trans_reg_graph()
        for dest in is_path.keys():
            print(f"dest: {dest}: {is_path[dest]}\n")

        print(f"======= register transition graph created in {time.time() - t} seconds =======\n\n")

        print(f"======= call to _search_arith_to_mov(100) =======\n\n")

        t = time.time()

        r.rop_searcher.search_arith_to_mov(100)

        print(f"======= done; {time.time() - t} seconds =======\n\n")

    def _op_stats(r: ROP_util):

        ef_cnt = 0
        gs = []
        g_ = False

        for g in r.rop_searcher.gadgets:

            g_ = False

            for ef in g.effects:

                if ef.params[0].is_op():
                    print(ef.params[0].type)
                    print(ef)

            if g_ is True:
                gs.append(g)

    def _trans_graph_stats(r: ROP_util):

        print(f"======= making register transition graph =======\n\n")

        logfile = open("./tg_stats", "w")

        t0 = time.time()

        trans_reg_graph, is_path = r.rop_searcher.get_trans_reg_graph()

        print(f"======= trans reg graph built in {time.time() - t0} seconds =======\n\n")

        for fixed_arg, subg_is_path in is_path.items():
            print(f"fixed arg {fixed_arg}", file=logfile)

            for dest, srcs in subg_is_path.items():
                print(f"dest {dest}: ", end="", file=logfile)

                for src, ok in srcs.items():

                    if src == dest:
                        continue

                    if ok:
                        print(f"{src}({len(trans_reg_graph[fixed_arg][dest][src])})", end=" ", file=logfile)

                print("", file=logfile)

            print("", file=logfile)

    def _mov_rr_tests(r: ROP_util):

        print(f"======= MOV_RR search test =======\n")

        print("x20 <- x7\n\n")

        t = time.time()

        gs = r.search_chain(wanted_effects = "x20 = x7", max_stack_byte_size = 2 ** 63, max_search_cnt = 1,
                            only_gadgets = False)
        for g in gs:
            g.show(capstone_handle=r.rop_searcher.capstone)
            print("")

        print("\nx3 <- x19, fixed x0 and x17\n\n")

        t = time.time()

        gs = r.search_chain(wanted_effects = "x3 = x19", max_stack_byte_size = 2 ** 63, max_search_cnt = 1,
                            only_gadgets = False, fixed_regs=["x0", "x17"])
        for g in gs:
            g.show(capstone_handle=r.rop_searcher.capstone)
            print("")

        print("\nx14 <- x15, fixed x10 and x19 (should not find anything?)\n\n")

        t = time.time()

        gs = r.search_chain(wanted_effects = "x14 = x15", max_stack_byte_size = 2 ** 63, max_search_cnt = 1,
                            only_gadgets = False, fixed_regs=["x10", "x19"])
        for g in gs:
            g.show(capstone_handle=r.rop_searcher.capstone)
            print("")

        print("\nx2 <- x6, fixed x13 and x2\n\n")

        t = time.time()

        gs = r.search_chain(wanted_effects = "x2 = x6", max_stack_byte_size = 2 ** 63, max_search_cnt = 1,
                            only_gadgets = False, fixed_regs=["x13", "x2"])
        for g in gs:
            g.show(capstone_handle=r.rop_searcher.capstone)
            print("")

        print("\nx21 <- x28, fixed x14 and x17\n\n")

        t = time.time()

        gs = r.search_chain(wanted_effects = "x21 = x28", max_stack_byte_size = 2 ** 63, max_search_cnt = 1,
                            only_gadgets = False, fixed_regs=["x14", "x17"])
        for g in gs:
            g.show(capstone_handle=r.rop_searcher.capstone)
            print("")

    def _search_by_subst_tests(r: ROP_util):
        
        print(f"======= ARITH search by (register-only) substitution test =======")

        print("x2 <- x0 + 0x10\n\n")

        gs = r.search_chain(wanted_effects = "x2 = x0 + 0x10")
        for g in gs:
            g.show(capstone_handle=r.rop_searcher.capstone)
            print("")

        print("x2 <- x0 + 0x10, fixed reg x19\n\n")

        gs = r.search_chain(wanted_effects = "x2 = x0 + 0x10", fixed_regs=["x19"])
        for g in gs:
            g.show(capstone_handle=r.rop_searcher.capstone)
            print("")

        print("x2 <- x1 xor x0\n")

        gs = r.search_chain(wanted_effects = "x2 = x1 ^ x0")
        for g in gs:
            g.show(capstone_handle=r.rop_searcher.capstone)
            print("")

    def _search_by_subst_adv_tests(r: ROP_util):
        
        print(f"======= ARITH search by (register and constants) substitution test =======")

        print("x2 <- x0 + 0xdeadbeef\n\n")

        gs = r.search_chain(wanted_effects = "x2 = x0 + 0xdeadbeef")
        for g in gs:
            g.show(capstone_handle=r.rop_searcher.capstone)
            print("")

        print("x1 <- x3 & 0xcaffee, fixed reg x19\n\n")

        gs = r.search_chain(wanted_effects = "x1 = x3 & 0xcaffee", fixed_regs=["x19"])
        for g in gs:
            g.show(capstone_handle=r.rop_searcher.capstone)
            print("")

        print("x2 <- x0 + x1 + 0xdeadbeef\n\n")

        gs = r.search_chain(wanted_effects = "x2 = x0 + x1 + 0xdeadbeef")
        for g in gs:
            g.show(capstone_handle=r.rop_searcher.capstone)
            print("")

    def _search_chain_ex0(r: ROP_util):

        print(f"======= searching for gadgets =======")

        print("load in x0 0x000000004f3f2f1f\n\n")

        t = time.time()

        gs = r.search_chain(wanted_effects = "x0 = 0x000000004f3f2f1f", max_stack_byte_size = 300, max_search_cnt = 5,
                            only_gadgets = True)
        for g in gs:
            g.show(capstone_handle=r.rop_searcher.capstone)
            print("")
            
    def _search_chain_ex1(r: ROP_util):

        print(f"======= searching for gadgets =======")

        print("load in x0 0x000000000000001f\n\n")

        t = time.time()

        gs = r.search_chain(wanted_effects = "x0 = 0x000000000000001f", max_stack_byte_size = 300, max_search_cnt = 10,
                            only_gadgets = True)
        for g in gs:
            g.show(capstone_handle=r.rop_searcher.capstone)
            print("")
            
    def _search_chain_ex2(r: ROP_util):

        print(f"======= searching for gadgets =======")

        print("x2 <- x1 + x4\n\n")

        t = time.time()

        gs = r.search_chain(wanted_effects = "x2 = x1 + x4", max_stack_byte_size = 300, max_search_cnt = 3,
                            only_gadgets = False)
        for g in gs:
            g.show(capstone_handle=r.rop_searcher.capstone)
            print("")
            
    def _search_chain_ex3(r: ROP_util):

        print(f"======= searching for gadgets =======")

        print("x20 <- x7 xor x0\n\n")

        t = time.time()

        gs = r.search_chain(wanted_effects = "x20 = x7 ^ x0", max_stack_byte_size = 300, max_search_cnt = 1,
                            only_gadgets = False)
        for g in gs:
            g.show(capstone_handle=r.rop_searcher.capstone)
            print("")
            
    def _search_chain_ex4(r: ROP_util):

        print(f"======= searching for gadgets =======")

        print("x20 <- x7\n\n")

        t = time.time()

        gs = r.search_chain(wanted_effects = "x20 = x7", max_stack_byte_size = 2 ** 63, max_search_cnt = 2,
                            only_gadgets = False)
        for g in gs:
            g.show(capstone_handle=r.rop_searcher.capstone)
            print("")

    def _search_chain_ex5(r: ROP_util):

        print(f"======= searching for gadgets =======")

        print("x2 <- x0 + 0x10\n\n")

        t = time.time()

        gs = r.search_chain(wanted_effects = "x2 = x0 + 0x10", max_stack_byte_size = 2 ** 63, max_search_cnt = 2,
                            only_gadgets = False)
        for g in gs:
            g.show(capstone_handle=r.rop_searcher.capstone)
            print("")
            
    def _search_chain_ex6(r: ROP_util):

        print(f"======= searching for gadgets =======")

        print("x2 <- x1, x3 = 0x00007ffff7abcd00, x4 = 0x00007ffff7abcd00\n\n")

        t = time.time()

        gs = r.search_chain(wanted_effects = "x2 = x1, x3 = 0x00007ffff7abcd00, x4 = 0x00007ffff7abcd00", max_stack_byte_size = 2 ** 63, max_search_cnt = 2,
                            only_gadgets = False)
        for g in gs:
            g.show(capstone_handle=r.rop_searcher.capstone)
            print("")
            
    def _search_chain_ex7(r: ROP_util):

        print(f"======= searching for gadgets =======")

        print("x14 = 0x00007ffff7abcd00\n\n")

        t = time.time()

        gs = r.search_chain(wanted_effects = "x14 = 0x00007ffff7abcd00", max_stack_byte_size = 2 ** 63, max_search_cnt = 2,
                            only_gadgets = False)
        for g in gs:
            g.show(capstone_handle=r.rop_searcher.capstone)
            print("")
            
    def _search_chain_ex8(r: ROP_util):

        print(f"======= searching for gadgets =======")

        print("x2 <- x0 + 0x10, fixed reg x19\n\n")

        t = time.time()

        gs = r.search_chain(wanted_effects = "x2 = x0 + 0x10", max_stack_byte_size = 2 ** 63, max_search_cnt = 2,
                            only_gadgets = False, fixed_regs=["x19"])
        for g in gs:
            g.show(capstone_handle=r.rop_searcher.capstone)
            print("")

    def _search_chain_ex9(r: ROP_util):

        print(f"======= searching for gadgets =======")

        print("x2 <- x1 xor x0\n")

        t = time.time()

        gs = r.search_chain(wanted_effects = "x2 = x1 ^ x0", max_stack_byte_size = 2 ** 63, max_search_cnt = 2,
                            only_gadgets = False)
        for g in gs:
            g.show(capstone_handle=r.rop_searcher.capstone)
            print("")
            
    random.seed(0)

    # bin = "/lib/aarch64-linux-gnu/libc.so.6"
    bin = "./libc_2.33_arm64"

    print(f"======= running roputils.py test =======")

    t = time.time()

    r = ROP_util(bin, Platform.ARM64)  
    r.disable_bruteforce() 
    r.scout_for_gadgets()
    
    r.stats()

    #_op_stats(r)
    #_trans_graph_stats(r)
    ##_mov_rr_tests(r)
    ##_search_by_subst_tests(r)
    ##_search_by_subst_adv_tests(r)
    #_search_chain_ex0(r)
    #_search_chain_ex1(r)
    #_search_chain_ex2(r)
    #_search_chain_ex3(r)
    ##_search_chain_ex4(r)
    ##_search_chain_ex5(r)
    #_search_chain_ex6(r)
    #_search_chain_ex7(r)
    ##_search_chain_ex8(r)
    ##_search_chain_ex9(r)

if __name__ == "__main__":
    _test()
