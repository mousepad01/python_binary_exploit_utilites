from sys import stdout
import time

class Logger:

    def _get_timer_id(self):
        
        to_ret = self._timer_cnt
        self._timer_cnt += 1

        return to_ret

    def _log(self, msg, sym, start_timer: bool = False, end_timer: int = None):
        
        t_id = None
        if self.print_log is True:
        
            _time = None
            if start_timer is True:

                t = time.time()

                t_id = self._get_timer_id()
                self.time_dict.update({t_id: t})

            if end_timer is not None:

                t = time.time()
                _time = t - self.time_dict[end_timer]
                self.time_dict.pop(end_timer, None)
            
            if _time is not None:
                print(f"{sym} [{self.session_name}] [{round(_time, 4)} s] {msg}", file = self.output_handle)
            else:
                print(f"{sym} [{self.session_name}] [] {msg}", file = self.output_handle)

        return t_id

    def log_info(self, msg, start_timer: bool = False, end_timer: int = None):
        return self._log(msg, sym = "[i]", start_timer = start_timer, end_timer = end_timer)

    def log_warning(self, msg, start_timer: bool = False, end_timer: int = None):
        return self._log(msg, sym = "[!]", start_timer = start_timer, end_timer = end_timer)

    def log_success(self, msg, start_timer: bool = False, end_timer: int = None):
        return self._log(msg, sym = "[*]", start_timer = start_timer, end_timer = end_timer)

    def __init__(self, session_name = "LOG", print_log = True, output_handle = stdout):

        def _estimate_time_overhead():

            RND_CNT = 10000

            _d = {}

            total_overhead = 0
            for i in range(RND_CNT):

                s = f"s{i}"
                if s is not None:

                    t = time.time()
                    _d.update({s: t})

                s_end = f"s{i}"
                if s_end is not None:

                    t = time.time()
                    total_overhead += t - _d[s]

            return total_overhead / RND_CNT

        self.session_name = session_name
        self.print_log = print_log
        self.output_handle = output_handle

        self.time_dict = {}
        self._timer_cnt = 1
        self._mean_timer_overhead = _estimate_time_overhead()