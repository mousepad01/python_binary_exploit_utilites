import gdb

class Utils:

    @staticmethod
    def is_int(to_check: str):

        if type(to_check) == int:
            return to_check
                
        failed_conversion = 0
        int_conversion = 0

        try:
            int_conversion = int(to_check, 10)
        except Exception:
            failed_conversion += 1

        if failed_conversion == 1:
            try:
                int_conversion = int(to_check, 16)
            except Exception:
                failed_conversion += 1

        if failed_conversion == 2:
            return None

        return int_conversion

    @staticmethod
    def get_val(raw: str):

        if raw == '' or raw is None:
            return 0

        val = Utils.is_int(raw)
        if val is not None:
            return val

        if raw[0] == "~":
            return ~Utils.get_val(raw[1:])           

        # binary operations and paranthesis     

        bin_ops = {"+": lambda x, y: x + y, 
                    "-": lambda x, y: x - y,
                    "*": lambda x, y: x * y,
                    "/": lambda x, y: x / y,
                    "&": lambda x, y: x & y,
                    "|": lambda x, y: x | y,
                    "^": lambda x, y: x ^ y,
                    ">>": lambda x, y: x >> y,
                    "<<": lambda x, y: x << y}

        open_paranthesis = 0

        op = None
        left_operand_raw = None
        right_operand_raw = None

        for i in range(len(raw)):
            c = raw[i]

            if c == "(":
                open_paranthesis += 1

            elif c == ")":
                open_paranthesis -= 1

            elif (open_paranthesis == 0) and (c in bin_ops.keys()):
                
                op = bin_ops[c]
                left_operand_raw, right_operand_raw = raw[:i].strip(), raw[i + 1:].strip()
                break
        
        if op is not None:
            return op(Utils.get_val(left_operand_raw), Utils.get_val(right_operand_raw))

        elif open_paranthesis == 0 and raw[0] == "(" and raw[-1] == ")":
            return Utils.get_val(raw[1:-1].strip())

        raise RuntimeError(f"cannot parse expression {raw}")

class testc (gdb.Command):
  """Test command for gdbutils.py script"""

  def __init__ (self):
    super (testc, self).__init__ ("testc", gdb.COMMAND_USER)

  def invoke (self, arg, from_tty):
    print ("test command from gdbutils.py is working")

testc()

class DumpBytes(gdb.Command):
    """Dump raw memory bytes in specified file\n
        Usage:\n
        dx [dump byte length] [file path] [start address as a value or arithmetic expression]"""

    def __init__(self):
        super(DumpBytes, self).__init__("dx", gdb.COMMAND_DATA)

    def invoke(self, arg, from_tty):

        args = arg.split()

        bytecount = Utils.get_val(args[0])
        filepath = args[1]
        start_addr = Utils.get_val(args[2])

        proc = gdb.inferiors()
        print(proc)
        proc = proc[0]

        b = proc.read_memory(start_addr, bytecount)
        with open(filepath, "wb+") as fout:
            fout.write(b.tobytes())

DumpBytes()