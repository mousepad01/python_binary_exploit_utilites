from __future__ import annotations
from typing import Dict, Generator, List, Tuple, Set
# both above imports only for type hints

from copy import deepcopy
from random import randint
from sys import stdout
from time import time

from parsebin import *
from utils import to_bytes, _is_int
from logger import Logger
from rop_platform import Platform

from capstone import *
import z3

# NOTE: everything here currently is WIP
#       for a stable implementation (x86 64) use roputils.py from main branch

# NOTE: any "address"-related keyword used does NOT take into accound ASLR / PIE

# TODO: option to create chains from gadgets from different binaries

# NOT YET USED
# retain the constants found during instruction analysis
# for optimising automatic rop chain generator
_existent_constants = set()

# class that stores any kind of entity that can have a value
# eg. stack bytes, registers, register value "snapshot" at some point of execution, and so on
# the design choice of using such an ambiguous class 
# is based on the fact that the implementation is way easier to understand, to extend, or to modify
# compared to the situation in which every use case of this class would get its own class
class structured_element:

    # dictionary of currently used structured elements types
    # {"ELEMENT_TYPE": [info param 1 type / info param 1 name, ...]}
    # NOTE: the fields described here only represent the keys of the self.info dict
    #       populating it with the corresponding (valid) values is the programmer's responsability
    ELEMENT_TYPES = {"64b_stack_val": ["id"],               # integer value from the stack, pointed by an id
                        "ct_val": ["value"],                # integer constant (non-stack / non-register) value

                        "reg_in": ["reg_name"],             # register value at the beginning of a gadget / chain
                        "reg_out": ["reg_name"],            # register value after executing a gadget / chain
                        
                        "add": ["term_1", "term_2"],        # arithmetic operations (can be recursive)
                        "sub": ["term_1", "term_2"],                    
                        "and": ["term_1", "term_2"], 
                        "or": ["term_1", "term_2"],
                        "xor": ["term_1", "term_2"],
                        "neg": ["term_1", "term_2"],        # for negation, term2 will always be None

                        "64b_stack_pad": []                 # marks padding (random value) for the stack view
                    }
    
    @staticmethod
    def instantiatestructured_element(element_type: str):

        if element_type not in structured_element.ELEMENT_TYPES.keys():
            raise RuntimeError(f"Cannot automatically instantiate structured_element with type {element_type}")
        
        element = structured_element(element_type)
        for info_field in structured_element.ELEMENT_TYPES[element_type]:
            element.info.update({info_field: None})

        return element
    
    def __init__(self, element_type: str):
        self.type = element_type
        self.info = {}

    def is_op(self):
        return self.type in ["add", "sub", "and", "or", "xor", "neg"]

    # mostly for debugging purposes
    def __str__(self):
        info_s = {str(k): str(v) for k, v in self.info.items()}
        return f"element type {self.type}, info {info_s}"

# class to simulate the real stack on which a gadget or chain is executed
class _64b_stack_view:

    # retain all the stack elements id's and their value
    # INCLUDING THE RETURN ADDRESSES
    stack_values = {}

    # stack id to uniquely identify the (same) stack values
    # INCLUDING THE RETURN ADDRESSES
    stack_id_cnt = 0

    def __init__(self):
        self.elements: List[structured_element] = []

    def push(self, element: structured_element):
        self.elements.append(element)

    @staticmethod
    def get_elem_id():

        to_deliver = _64b_stack_view.stack_id_cnt

        _64b_stack_view.stack_id_cnt += 1
        _64b_stack_view.stack_values.update({to_deliver: None})
        
        return to_deliver

    # returns a joined stack
    # does NOT deepcopy
    @staticmethod
    def join_stacks(fst: _64b_stack_view, snd: _64b_stack_view):

        res = _64b_stack_view()
        res.elements = fst.elements + snd.elements
        return res
            
    # mostly for debugging purposes
    def __str__(self):
        return f"stack view with elements {[str(el) for el in self.elements]}"

# class to store the semantics of all the gadgets
# again, some ambiguity is intentionally provided, for same reasoning as the above mentioned classes
# but it has some constrains:
#   * every effect has an id that should be part of an implementation convention
#   * the effect, if seen as an operation, stores the result value in a single destination element (currently, by convention, only registers)
class _effect:

    # if true, arith match is done by thecking operation trees, method invariant only to commutativity
    #           no false positives, lots of false negatives, 
    # if false, arith match is done by giving random inputs to registers,
    #           and eventually tring to adjust the checked effect stack values to match
    #           some false positives, no false negatives
    ARITH_EXACT_MATCH = False

    # indicates the number of (random) tests to be done
    # ignored if ARITH_EXACT_MATCH is True
    ARITH_P_TEST_CNT = 30

    # dictionary of currently used effect types
    # {"EFFECT_TYPE": (destination_element type, [param1 type, ...]), ...}
    # NOTE: ARITH type has parameter type configurable: "<op>"
    EFFECT_TYPES = {"LOAD_S": ("reg_out", ["64b_stack_val"]),       # load value in register from the stack (RSP value increase NOT included)
                    "LOAD_CT": ("reg_out", ["ct_val"]),             # load value that is constant (that does not originate from registers or stack)
                    "MOV_RR": ("reg_out", ["reg_in"]),              # copying value from one register to another
                    "ARITH": ("reg_out", []),                       # operations (add, sub, bitewise operations, etc) - the PARAMS are not included
                    "ADD_SP": (None, ["ct_val"]),                   # separate effect indicating incrementing RSP (with a constant value only)
                    "NO_OP": (None, []),                            # no operation
                    "JUMP": (None, ["reg_in"])                      # ARM64-only: used instead on ret 
                    }

    @staticmethod
    def instantiate_effect(effect_type: str):
     
        if effect_type not in _effect.EFFECT_TYPES.keys():
            raise RuntimeError(f"Cannot automatically instantiate _effect with type {effect_type}")

        effect = _effect(effect_type, None, [])

        dest_type, param_type_list = _effect.EFFECT_TYPES[effect_type]

        if dest_type is not None:
            effect.destination_element = structured_element.instantiatestructured_element(dest_type)
        
        for param_type in param_type_list:
            effect.params.append(structured_element.instantiatestructured_element(param_type))

        return effect

    # common code lines between any location (at least when interpreting instructions)
    # for creating an effect that marks an arithmetic operation with a constant
    # NOTE: no checks are done
    @staticmethod
    def make_arith_ct_effect(op_type: str, dest_reg_name: str, constant: int):

        arith_op_ct_effect = _effect.instantiate_effect("ARITH")
        arith_op_ct_effect.destination_element.info["reg_name"] = dest_reg_name

        arith_op_ct_effect.params.append(structured_element.instantiatestructured_element(op_type))

        arith_op_ct_effect.params[0].info["term_1"] =  structured_element.instantiatestructured_element("reg_in")
        arith_op_ct_effect.params[0].info["term_2"] =  structured_element.instantiatestructured_element("ct_val")
        arith_op_ct_effect.params[0].info["term_1"].info["reg_name"] = dest_reg_name
        arith_op_ct_effect.params[0].info["term_2"].info["value"] = constant

        _existent_constants.add(constant)

        return arith_op_ct_effect

    # same as make_arith_ct_effect but for operations with (only) registers
    # NOTE: no checks are done
    @staticmethod
    def make_arith_reg_effect(op_type: str, dest_reg_name: str, src_reg_name: str):

        arith_op_reg_effect = _effect.instantiate_effect("ARITH")
        arith_op_reg_effect.destination_element.info["reg_name"] = dest_reg_name

        arith_op_reg_effect.params.append(structured_element.instantiatestructured_element(op_type))

        arith_op_reg_effect.params[0].info["term_1"] =  structured_element.instantiatestructured_element("reg_in")
        arith_op_reg_effect.params[0].info["term_2"] =  structured_element.instantiatestructured_element("reg_in")
        arith_op_reg_effect.params[0].info["term_1"].info["reg_name"] = dest_reg_name
        arith_op_reg_effect.params[0].info["term_2"].info["reg_name"] = src_reg_name

        return arith_op_reg_effect

    @staticmethod
    def make_arith_custom_effect(dest_reg_name: str, custom_element: structured_element):

        arith_effect = _effect.instantiate_effect("ARITH")
        arith_effect.destination_element.info["reg_name"] = dest_reg_name
        arith_effect.params.append(custom_element)

        return arith_effect

    @staticmethod
    def make_load_ct_effect(dest_reg_name: str, constant: int):

        load_ct_effect = _effect.instantiate_effect("LOAD_CT")
        load_ct_effect.destination_element.info["reg_name"] = dest_reg_name
        load_ct_effect.params[0].info["value"] = constant

        _existent_constants.add(constant)

        return load_ct_effect

    @staticmethod
    def make_load_s_effect(dest_reg_name: str):

        load_s_effect = _effect.instantiate_effect("LOAD_S")
        load_s_effect.destination_element.info["reg_name"] = dest_reg_name
        load_s_effect.params[0].info["id"] = _64b_stack_view.get_elem_id()

        return load_s_effect

    @staticmethod
    def make_mov_rr_effect(dest_reg_name: str, src_reg_name: str):

        mov_rr_effect = _effect.instantiate_effect("MOV_RR")
        mov_rr_effect.destination_element.info["reg_name"] = dest_reg_name
        mov_rr_effect.params[0].info["reg_name"] = src_reg_name

        return mov_rr_effect

    @staticmethod
    def make_neg_effect(dest_reg_name: str):

        arith_neg_effect = _effect.instantiate_effect("ARITH")
        arith_neg_effect.destination_element.info["reg_name"] = dest_reg_name

        arith_neg_effect.params.append(structured_element.instantiatestructured_element("neg"))

        arith_neg_effect.params[0].info["term_1"] =  structured_element.instantiatestructured_element("reg_in")
        arith_neg_effect.params[0].info["term_1"].info["reg_name"] = dest_reg_name

        return arith_neg_effect

    @staticmethod
    def make_add_rsp_effect(constant: int):

        add_rsp_effect = _effect.instantiate_effect("ADD_SP")
        add_rsp_effect.params[0].info["value"] = constant

        # this constant is NOT added into known constants cache
        # because is limited in interacting only with SP

        return add_rsp_effect

    @staticmethod
    def make_jump_effect(reg: str):

        jump_effect = _effect.instantiate_effect("JUMP")
        jump_effect.params[0].info["reg_name"] = reg

        return jump_effect

    def __init__(self, effect_type: str, destination_element: structured_element, params: List[structured_element]):

        self.type: str = effect_type
        self.destination_element: structured_element = destination_element
        self.params: List[structured_element] = params

    # currently uses Z3: https://github.com/Z3Prover/z3
    def _match_arith(self, checked_ef: _effect):

        if self.destination_element.info["reg_name"] != checked_ef.destination_element.info["reg_name"]:
            return False

        # possible type pairs (wanted_ef, checked_ef):
        # ARITH, ARITH
        # MOV_RR, ARITH
        # LOAD_CT, ARITH
        # NOTE: if the WANTED EFFECT is of type ARITH, it is assumed it does NOT contain stack elements

        # match the operation trees, taking into account only commutativity of some operations
        def _tree_match(wanted_ef: structured_element, checked_ef: structured_element):

            if (wanted_ef is None) and (checked_ef is None):
                return True

            if wanted_ef.type != checked_ef.type:
                return False
            
            if wanted_ef.type == "64b_stack_val":

                if (_64b_stack_view.stack_values[checked_ef.info["id"]] == _64b_stack_view.stack_values[wanted_ef.info["id"]]) \
                    or (_64b_stack_view.stack_values[checked_ef.info["id"]] is None):

                    if checked_ef.info["id"] != wanted_ef.info["id"]:

                        val = _64b_stack_view.stack_values[wanted_ef.info["id"]]
                        _64b_stack_view.stack_values.pop(wanted_ef.info["id"])
                        
                        wanted_ef.info["id"] = checked_ef.info["id"]
                        _64b_stack_view.stack_values[checked_ef.info["id"]] = val

                    return True

                else:
                    return False

            if wanted_ef.type == "reg_in":
                return wanted_ef.info["reg_name"] == checked_ef.info["reg_name"]

            if wanted_ef.type == "ct_val":
                return wanted_ef.info["value"] == checked_ef.info["value"]

            if wanted_ef.type in ["sub", "neg"]:
                return _tree_match(wanted_ef.info["term_1"], checked_ef.info["term_1"]) and _tree_match(wanted_ef.info["term_2"], checked_ef.info["term_2"])

            if wanted_ef.is_op():
                return (_tree_match(wanted_ef.info["term_1"], checked_ef.info["term_1"]) and _tree_match(wanted_ef.info["term_2"], checked_ef.info["term_2"])) or\
                        (_tree_match(wanted_ef.info["term_2"], checked_ef.info["term_1"]) and _tree_match(wanted_ef.info["term_1"], checked_ef.info["term_2"]))

            raise RuntimeError(f"trying to match trees with unknown types: {wanted_ef.type}")

        # probabilistic match
        def _probabilistic_match(wanted_ef: _effect, checked_ef: _effect):

            stack_ids = set()
            reg_in_elements = {}

            # in case of stack assignments, z3 solver is used
            z3_solver = z3.Solver()
            
            # simulates the execution of the arith effect
            def _simulate(op_element: structured_element, local_stack_values: Dict[int, int], reg_start_values: Dict[str, int]):
        
                if op_element.type == "64b_stack_val":
                    return local_stack_values[op_element.info["id"]]

                if op_element.type == "ct_val":
                    return op_element.info["value"]

                if op_element.type == "reg_in":
                    return reg_start_values[op_element.info["reg_name"]]

                if op_element.type == "add":
                    return _simulate(op_element.info["term_1"], local_stack_values, reg_start_values) +\
                            _simulate(op_element.info["term_2"], local_stack_values, reg_start_values)
                
                if op_element.type == "sub":
                    return _simulate(op_element.info["term_1"], local_stack_values, reg_start_values) -\
                            _simulate(op_element.info["term_2"], local_stack_values, reg_start_values)

                if op_element.type == "and":
                    return _simulate(op_element.info["term_1"], local_stack_values, reg_start_values) &\
                            _simulate(op_element.info["term_2"], local_stack_values, reg_start_values)

                if op_element.type == "or":
                    return _simulate(op_element.info["term_1"], local_stack_values, reg_start_values) |\
                            _simulate(op_element.info["term_2"], local_stack_values, reg_start_values)

                if op_element.type == "xor":
                    return _simulate(op_element.info["term_1"], local_stack_values, reg_start_values) ^\
                            _simulate(op_element.info["term_2"], local_stack_values, reg_start_values)

                if op_element.type == "neg":
                    return ~(_simulate(op_element.info["term_1"], local_stack_values, reg_start_values))

            # function that folds over the ARITH expression tree 
            # and updates the z3 solver
            _aux_id = 0
            def _convert_to_z3_expr(el: structured_element):
                
                nonlocal _aux_id

                if el.type == "64b_stack_val":

                    val = _64b_stack_view.stack_values[el.info["id"]]
                    if val is not None:

                        conv_el = z3.BitVec(f"c{_aux_id}", 64)
                        z3_solver.add(conv_el == val)

                        return conv_el
                    
                    else:
                        return z3.BitVec(f"stack{el.info['id']}", 64)

                else:

                    conv_el = z3.BitVec(f"c{_aux_id}", 64)
                    _aux_id += 1
                    
                    if el.type == "ct_val":
                        z3_solver.add(conv_el == el.info["value"])

                    elif el.type == "reg_in":
                        z3_solver.add(conv_el == reg_in_elements[el.info["reg_name"]])

                    elif el.type == "neg":
                        
                        t = _convert_to_z3_expr(el.info["term_1"])
                        z3_solver.add(conv_el == ~t)

                    elif el.is_op():

                        t1 = _convert_to_z3_expr(el.info["term_1"])
                        t2 = _convert_to_z3_expr(el.info["term_2"])

                        if el.type == "add":
                            z3_solver.add(conv_el == t1 + t2)

                        elif el.type == "sub":
                            z3_solver.add(conv_el == t1 - t2)

                        elif el.type == "and":
                            z3_solver.add(conv_el == t1 & t2)

                        elif el.type == "or":
                            z3_solver.add(conv_el == t1 | t2)

                        elif el.type == "xor":
                            z3_solver.add(conv_el == t1 ^ t2)

                    return conv_el

            # method that determines whether the checked expression has unassigned stack elements or not
            # and if it has, initialize them as keys in the stack_elements_assignments dictionary
            # also, it retains the reg_in elements used
            def _check_stack_elements(el: structured_element):

                if el is None:
                    return False

                if el.type == "64b_stack_val":
                    
                    if _64b_stack_view.stack_values[el.info["id"]] is None:

                        stack_ids.add(el.info["id"])
                        return True

                    return False

                elif el.type == "reg_in":

                    reg_in_elements.update({el.info["reg_name"]: None})
                    return False

                elif el.type == "ct_val":
                    return False

                elif el.is_op():

                    checked_1 = _check_stack_elements(el.info["term_1"])
                    checked_2 = _check_stack_elements(el.info["term_2"])

                    return checked_1 or checked_2

                raise RuntimeError(f"unknown element type {el.type} when trying to match arith")

            stack_elements_found_inwanted = _check_stack_elements(wanted_ef.params[0])
            if stack_elements_found_inwanted is True:
                raise RuntimeError("stack element found in wanted effect")

            stack_elements_found = _check_stack_elements(checked_ef.params[0])

            for _ in range(_effect.ARITH_P_TEST_CNT):

                for reg_in in reg_in_elements.keys():
                    reg_in_elements[reg_in] = randint(0, 2 ** 64)

                wanted_ef_val = 0

                if wanted_ef.type == "MOV_RR":
                    wanted_ef_val = reg_in_elements[wanted_ef.params[0].info["reg_name"]]

                elif wanted_ef.type == "LOAD_CT":
                    wanted_ef_val = wanted_ef.params[0].info["value"]

                elif wanted_ef.type == "ARITH":
                    wanted_ef_val = _simulate(wanted_ef.params[0], _64b_stack_view.stack_values, reg_in_elements)

                # the checked_ef has no stack id to be assigned a value, only to compute the result based on reg_in values
                if stack_elements_found is False:

                    checked_ef_val = _simulate(checked_ef.params[0], _64b_stack_view.stack_values, reg_in_elements)
                    if checked_ef_val != wanted_ef_val:
                        return False

                else:
                    # there are unknown stack values that need to be assigned a value
                    # before proceeding in checking the matching

                    z3_expr = _convert_to_z3_expr(checked_ef.params[0])
                    z3_solver.add(z3_expr == wanted_ef_val)

            # checking for stack element possible assignments 
            # so that checked_ef matches wanted_ef
            if stack_elements_found is True:

                if z3_solver.check() == z3.sat:

                    sm = z3_solver.model()
                    for stack_elem_id in stack_ids:

                        z3_stack_elem = z3.BitVec(f"stack{stack_elem_id}", 64)
                        val = sm[z3_stack_elem]

                        if val is not None:
                            _64b_stack_view.stack_values[stack_elem_id] = val.as_long()
                        #else:
                            # irrelevant element, add some padding
                         #   _64b_stack_view.stack_values[stack_elem_id] = int.from_bytes(b'A' * 8, 'little')

                else:
                    return False

            return True
        
        if _effect.ARITH_EXACT_MATCH is True:
            return _tree_match(self, checked_ef)
        else:
            return _probabilistic_match(self, checked_ef)

    # function that matches two effects
    # NOTE: when matching with LOAD_S effects, self stack element ID is changed
    def match(self, g_effect: _effect):

        if self.destination_element.info["reg_name"] != g_effect.destination_element.info["reg_name"]:
            return False

        if self.type == "ARITH" or g_effect.type == "ARITH":
            return self._match_arith(g_effect)
        
        # LOAD_S is intentionally restricted to only other LOAD_S effects, for an efficient/ fast search
        # if one wants to have all the possible ways of loading a value in a register, LOAD_CT matching should be chosen instead
        if self.type == "LOAD_S":
            
            if g_effect.type != "LOAD_S":
                return False
            
            # either the wanted effect has the same value as the stack element (none or int value)
            # or the vanted effect has a concrete value and the stack element is none, case in which stack value is assigned the wanted one
            # or both the stack and the wanted elements have non-none values, but are different, case in which it fails
            # in any case it succeeds, the wanted value id <- the stack id
            if (_64b_stack_view.stack_values[g_effect.params[0].info["id"]] == _64b_stack_view.stack_values[self.params[0].info["id"]]) \
                or (_64b_stack_view.stack_values[g_effect.params[0].info["id"]] is None):

                if g_effect.params[0].info["id"] != self.params[0].info["id"]:

                    val = _64b_stack_view.stack_values[self.params[0].info["id"]]
                    _64b_stack_view.stack_values.pop(self.params[0].info["id"])

                    self.params[0].info["id"] = g_effect.params[0].info["id"]
                    _64b_stack_view.stack_values[g_effect.params[0].info["id"]] = val

                return True

            else:
                return False

        elif self.type == "LOAD_CT":
            
            if g_effect.type == "LOAD_CT":

                if g_effect.params[0].info["value"] != self.params[0].info["value"]:
                    return False
                return True

            elif g_effect.type == "LOAD_S":

                if (_64b_stack_view.stack_values[g_effect.params[0].info["id"]] == self.params[0].info["value"]) \
                    or (_64b_stack_view.stack_values[g_effect.params[0].info["id"]] is None):

                    _64b_stack_view.stack_values[g_effect.params[0].info["id"]] = self.params[0].info["value"]
                    return True
            
                return False

            return False

        elif self.type == "MOV_RR":
            
            if g_effect.type == "MOV_RR":

                if self.params[0].info["reg_name"] != g_effect.params[0].info["reg_name"]:
                    return False
                return True

            return False

        raise RuntimeError(f"trying to match types {self.type}, {g_effect.type}")
    
    # method that converts each dissasembled instruction provided by Capstone into effects
    # it is also responsible for checking the validity of the instruction
    @staticmethod
    def analyse_instr(instr: CsInsn, platform: Platform):

        def _analyse_x86_64_instr():

            # separate the arguments from instr.op_str
            def _get_2_args(op_str: str):

                mov_args = op_str.split(",")
                    
                if len(mov_args) != 2:
                    return None, None

                dest = mov_args[0].strip()
                src = mov_args[1].strip()

                return dest, src

            # checks whether the instruction effects 
            # are ignored (from the point of view of this algorithm)
            # and are treated as NOP
            def _ignored_instr(instr: CsInsn):

                if instr.mnemonic in platform.IGNORED_INSTR_MNEMONICS:
                    return True

                return False
            
            try:

                instr_effects = []

                mnemonic = instr.mnemonic

                if mnemonic == "pop":

                    if instr.op_str not in platform.SUPPORTED_REGS:
                        return None

                    load_s_effect = _effect.make_load_s_effect(instr.op_str)
                    add_rsp_effect = _effect.make_add_rsp_effect(8)

                    instr_effects.append(load_s_effect)
                    instr_effects.append(add_rsp_effect)

                elif mnemonic == "mov":
                    
                    dest, src = _get_2_args(instr.op_str)

                    if dest not in platform.SUPPORTED_REGS:
                        return None

                    # TODO: add mov r, rsp support
                    # TODO: add 32b / 16b registers support (at least for some cases)

                    if src not in platform.SUPPORTED_REGS:

                        int_src = _is_int(src)
                        if int_src is None:
                            
                            if src == "qword ptr [rsp]":
                                load_s_effect = _effect.make_load_s_effect(dest)
                                instr_effects.append(load_s_effect)
                            else:
                                return None
                        else:
                            load_ct_effect = _effect.make_load_ct_effect(dest, int_src)
                            instr_effects.append(load_ct_effect)

                    else:
                        mov_rr_effect = _effect.make_mov_rr_effect(dest, src)
                        instr_effects.append(mov_rr_effect)

                elif mnemonic == "xchg":

                    r1, r2 = _get_2_args(instr.op_str)

                    if (r1 not in platform.SUPPORTED_REGS) or (r2 not in platform.SUPPORTED_REGS):
                        return None

                    if r1 == r2:

                        nop_effect = _effect.instantiate_effect("NO_OP")
                        instr_effects.append(nop_effect)

                    else:
                    
                        mov_rr_effect1 = _effect.make_mov_rr_effect(r1, r2)
                        mov_rr_effect2 = _effect.make_mov_rr_effect(r2, r1)

                        instr_effects.append(mov_rr_effect1)
                        instr_effects.append(mov_rr_effect2)

                elif mnemonic in ["add", "sub"]:

                    dest, src = _get_2_args(instr.op_str)

                    if (dest not in platform.SUPPORTED_REGS) and (dest != "rsp"):
                        return None

                    if dest == "rsp":

                        if mnemonic != "add":
                            return None

                        int_src = _is_int(src)

                        if (int_src is None) or (int_src % 8 != 0):
                            return None

                        add_rsp_effect = _effect.make_add_rsp_effect(int_src)
                        instr_effects.append(add_rsp_effect)

                    elif src in platform.SUPPORTED_REGS:
                        
                        arith_add_reg_effect = _effect.make_arith_reg_effect(mnemonic, dest, src)
                        instr_effects.append(arith_add_reg_effect)
                        
                    else:
                        
                        int_src = _is_int(src)

                        if int_src is None:
                            return None

                        op_type = "add"
                        if (int_src < 0 and mnemonic == "add") or (int_src >= 0 and mnemonic == "sub"):
                            op_type = "sub"

                        arith_add_ct_effect = _effect.make_arith_ct_effect(op_type, dest, int_src)
                        instr_effects.append(arith_add_ct_effect)

                elif mnemonic in ["dec", "inc"]:
                    
                    dest = instr.op_str

                    if dest not in platform.SUPPORTED_REGS:
                        return None

                    op_type = "sub"
                    if mnemonic == "inc":
                        op_type = "add"

                    arith_1_effect = _effect.make_arith_ct_effect(op_type, dest, 1)
                    instr_effects.append(arith_1_effect)

                elif mnemonic == "neg":
                    
                    if instr.op_str not in platform.SUPPORTED_REGS:
                        return None

                    arith_neg_effect = _effect.make_neg_effect(instr.op_str)
                    instr_effects.append(arith_neg_effect)

                elif mnemonic in ["and", "or", "xor"]:
                    
                    dest, src = _get_2_args(instr.op_str)

                    if dest not in platform.SUPPORTED_REGS:
                        return None

                    if src not in platform.SUPPORTED_REGS:

                        int_src = _is_int(src)

                        if int_src is None:
                            return None
                        
                        arith_bitwise_ct_effect = _effect.make_arith_ct_effect(mnemonic, dest, int_src)
                        instr_effects.append(arith_bitwise_ct_effect)

                    else:
                        # particular case xor r, r <=> mov r, 0
                        if dest == src:

                            load_0_effect = _effect.make_load_ct_effect(dest, 0)
                            instr_effects.append(load_0_effect)

                        else:
                            arith_bitwise_reg_effect = _effect.make_arith_reg_effect(mnemonic, dest, src)
                            instr_effects.append(arith_bitwise_reg_effect)
                        
                elif mnemonic == "nop" or _ignored_instr(instr):
                    
                    nop_effect = _effect.instantiate_effect("NO_OP")
                    instr_effects.append(nop_effect)

                else:
                    return None

                return instr_effects          

            except Exception:
                return None

        if platform is Platform.X86_64:
            return _analyse_x86_64_instr()

        elif platform is Platform.ARM64:
            raise RuntimeError("not yet implemented")

        else:
            raise RuntimeError(f"unsupported platform {platform}")

    # method responsible for creating a gadget from separate (but ordered) instruction effects
    # the joining should resemble joining effects when building rop chains from gadgets
    @staticmethod
    def join_instr_effects(ordered_effects: List[List[_effect]]):
        
        # depth-first exploration of <op>-type structured_element arithmetic tree
        # yielding every structured_element of type "reg_in"
        def _recursive_arith_exploration(element: structured_element):
        
            if element.type == "reg_in":
                yield element

            elif element.is_op():
                
                if element.info["term_1"] is not None:
                    for reg_in_elem in _recursive_arith_exploration(element.info["term_1"]):
                        yield reg_in_elem

                if element.info["term_2"] is not None:
                    for reg_in_elem in _recursive_arith_exploration(element.info["term_2"]):
                        yield reg_in_elem
        
        # eliminate from the joined list effects such as NO_OP or "move r_i, r_i"
        def _ignored_effect(ef: _effect):

            if ef.type in ["NO_OP", "ADD_SP"]:
                return True

            if ef.type == "MOV_RR" and ef.destination_element.info["reg_name"] == ef.params[0].info["reg_name"]:
                return True

            return False

        if len(ordered_effects) == 0:
            return None

        # position of rsp in the stack view, considering 64 bit elements (real rsp byte offset = sp_pos * 8 bytes)
        sp_pos = 0
        acc_effects: List[_effect] = []
        acc_stack = _64b_stack_view()

        # the joining (currently) has 7 steps
        #
        #   1) initialize the joined effects list with the second effects list
        #   2) update the stack by analysing LOAD_S and ADD_SP effects
        #   3) for every instruction in the joined effects list, 
        #       replace every "reg_in" with the corresponding "reg_out" from the first effects list
        #   4) copy every effect from the first effects list into the joined effects list, that has the destination reg
        #       different from any other destination reg from the joined effects list,
        #       and also skip NO_OP and ADD_SP effects
        #   5) (optionally) iterate over all effects from the joined effects list and filter them
        #       so that effects of type move ri, ri are eliminated, or for simplifying arithmetic effects
        #   6) the first effects list is assigned the newly created joined effects list, and the loop continues 
        #       until all effect lists are processed
        #   7) a new gadget is created with the final effects list and the obtained stack, some validity constraints are imposed
        #       and, optionally, other optimizations

        # NOTE: no two effects from a single effect list contain the same destination register
        #       proof by induction: base case assured by the analyse_instr, 
        #                           induction step proven by the rest of the current algorithm's steps

        for i in range(len(ordered_effects)):
            
            # step 1)
            new_acc_effect_list = deepcopy(ordered_effects[i])

            # step 2)
            for ef in new_acc_effect_list:

                if ef.type == "LOAD_S":
                    
                    if sp_pos == len(acc_stack.elements):

                        acc_stack.push(structured_element.instantiatestructured_element("64b_stack_val"))
                        acc_stack.elements[sp_pos].info["id"] = ef.params[0].info["id"]

                    else:
                        ef.params[0].info["id"] = acc_stack.elements[sp_pos].info["id"]

                elif ef.type == "ADD_SP":
                    
                    inc_pos_cnt = ef.params[0].info["value"] // 8

                    while inc_pos_cnt > 0:

                        if sp_pos == len(acc_stack.elements):
                            acc_stack.push(structured_element.instantiatestructured_element("64b_stack_pad"))

                        sp_pos += 1
                        inc_pos_cnt -= 1

            # step 3)
            for ef in new_acc_effect_list:

                if ef.type == "MOV_RR":
                    
                    reg_in_name = ef.params[0].info["reg_name"]

                    corresp_before_ef = None
                    for before_ef in acc_effects:

                        if before_ef.destination_element.info["reg_name"] == reg_in_name:
                            corresp_before_ef = before_ef
                            break

                    if corresp_before_ef is not None:
                        
                        if corresp_before_ef.type == "MOV_RR":
                            ef.params[0].info["reg_name"] = corresp_before_ef.params[0].info["reg_name"]

                        elif corresp_before_ef.type in ["ARITH", "LOAD_S", "LOAD_CT"]:
                            
                            # example for ARITH, analogous for rest
                            # r1 = t1 <op> t2
                            # r2 = r1
                            # joined (for r2): r2 = t1 <op> t2

                            ef.type = corresp_before_ef.type
                            ef.params = deepcopy(corresp_before_ef.params)

                elif ef.type == "ARITH":
                    
                    expr = ef.params[0]
                    for reg_in_elem in _recursive_arith_exploration(expr):
                        
                        reg_in_name = reg_in_elem.info["reg_name"]

                        corresp_before_ef = None
                        for before_ef in acc_effects:

                            if before_ef.destination_element.info["reg_name"] == reg_in_name:
                                corresp_before_ef = before_ef
                                break

                        if corresp_before_ef is not None:

                            if corresp_before_ef.type == "LOAD_S":

                                reg_in_elem.type = "64b_stack_val"
                                reg_in_elem.info = {"id": corresp_before_ef.params[0].info["id"]}

                            elif corresp_before_ef.type == "LOAD_CT":
                                
                                reg_in_elem.type = "ct_val"
                                reg_in_elem.info = {"value": corresp_before_ef.params[0].info["value"]}

                            elif corresp_before_ef.type == "MOV_RR":
                                reg_in_elem.info["reg_name"] = corresp_before_ef.params[0].info["reg_name"]

                            elif corresp_before_ef.type == "ARITH":
                                
                                reg_in_elem.type = corresp_before_ef.params[0].type
                                reg_in_elem.info = deepcopy(corresp_before_ef.params[0].info)
        
            # step 4) and 5)
            for before_ef in acc_effects:
                if before_ef.destination_element is not None:

                    before_ef_dest_reg_name = before_ef.destination_element.info["reg_name"]

                    overridden = False
                    for ef in new_acc_effect_list:

                        if (ef.destination_element is not None) and (ef.destination_element.info["reg_name"] == before_ef_dest_reg_name):
                            overridden = True

                    if overridden is False:
                        new_acc_effect_list.append(before_ef)
                    
            # step 5) and 6)
            acc_effects.clear()
            for ef in new_acc_effect_list:
                
                if _ignored_effect(ef) is False:
                    acc_effects.append(ef)

        # step 7)
        acc_effects_filtered = []
        for ef in acc_effects:
            
            if _ignored_effect(ef) is False:
                acc_effects_filtered.append(ef)
                
        # the rsp must be at the end of the stack view, 
        # so that the return address of the gadget can be added
        if sp_pos != len(acc_stack.elements):
            return None

        gadget = ROP_gadget()

        # return address for the next gadget / function
        acc_stack.push(structured_element.instantiatestructured_element("64b_stack_val"))
        acc_stack.elements[sp_pos].info["id"] = _64b_stack_view.get_elem_id()
        sp_pos += 1

        gadget.stack = acc_stack
        gadget.effects = acc_effects_filtered

        return gadget

    # method responsible for joining two effects list
    # does NOT make any deep copy - fst and snd should be created copies
    # resembles join_instr_effects, but:
    #   * does not take any stack into consideration
    #   * returns a list of effects, not a gadget
    #   * only two effects list can be joined at a time
    @staticmethod
    def join_effects(fst: List[_effect], snd: List[_effect]):

        if len(fst) == 0 or len(snd) == 0:
            return fst + snd

        # depth-first exploration of <op>-type structured_element arithmetic tree
        # yielding every structured_element of type "reg_in"
        def _recursive_arith_exploration(element: structured_element):
        
            if element.type == "reg_in":
                yield element

            elif element.is_op():
                
                if element.info["term_1"] is not None:
                    for reg_in_elem in _recursive_arith_exploration(element.info["term_1"]):
                        yield reg_in_elem

                if element.info["term_2"] is not None:
                    for reg_in_elem in _recursive_arith_exploration(element.info["term_2"]):
                        yield reg_in_elem
        
        # eliminate from the joined list effects such as NO_OP or "move r_i, r_i"
        def _ignored_effect(ef: _effect):

            if ef.type in ["NO_OP", "ADD_SP"]:
                return True

            if ef.type == "MOV_RR" and ef.destination_element.info["reg_name"] == ef.params[0].info["reg_name"]:
                return True

            return False
            
        res = snd

        # replacing every reg_in from res(=snd) with corresponding reg_out from fst
        for ef in res:

            if ef.type == "MOV_RR":
                
                reg_in_name = ef.params[0].info["reg_name"]

                corresp_before_ef = None
                for before_ef in fst:

                    if before_ef.destination_element.info["reg_name"] == reg_in_name:
                        corresp_before_ef = before_ef
                        break

                if corresp_before_ef is not None:
                    
                    if corresp_before_ef.type == "MOV_RR":
                        ef.params[0].info["reg_name"] = corresp_before_ef.params[0].info["reg_name"]

                    elif corresp_before_ef.type in ["ARITH", "LOAD_S", "LOAD_CT"]:

                        ef.type = corresp_before_ef.type
                        ef.params = deepcopy(corresp_before_ef.params)

            elif ef.type == "ARITH":
                
                expr = ef.params[0]
                for reg_in_elem in _recursive_arith_exploration(expr):
                    
                    reg_in_name = reg_in_elem.info["reg_name"]

                    corresp_before_ef = None
                    for before_ef in fst:

                        if before_ef.destination_element.info["reg_name"] == reg_in_name:
                            corresp_before_ef = before_ef
                            break

                    if corresp_before_ef is not None:

                        if corresp_before_ef.type == "LOAD_S":

                            reg_in_elem.type = "64b_stack_val"
                            reg_in_elem.info = {"id": corresp_before_ef.params[0].info["id"]}

                        elif corresp_before_ef.type == "LOAD_CT":
                            
                            reg_in_elem.type = "ct_val"
                            reg_in_elem.info = {"value": corresp_before_ef.params[0].info["value"]}

                        elif corresp_before_ef.type == "MOV_RR":
                            reg_in_elem.info["reg_name"] = corresp_before_ef.params[0].info["reg_name"]

                        elif corresp_before_ef.type == "ARITH":
                            
                            reg_in_elem.type = corresp_before_ef.params[0].type
                            reg_in_elem.info = deepcopy(corresp_before_ef.params[0].info)
    
        # copying every effect from fst that has reg_out which is not in any reg_out from res
        for before_ef in fst:
            if before_ef.destination_element is not None:

                before_ef_dest_reg_name = before_ef.destination_element.info["reg_name"]

                overridden = False
                for ef in res:

                    if (ef.destination_element is not None) and (ef.destination_element.info["reg_name"] == before_ef_dest_reg_name):
                        overridden = True

                if overridden is False:
                    res.append(before_ef)
                
        # filtering
        res_filtered = []
        for ef in res:
            
            if _ignored_effect(ef) is False:
                res_filtered.append(ef)

        return res_filtered

    # mostly for debugging purposes
    def __str__(self):
        return f"effect type {self.type}, destination element {self.destination_element}, params {[str(el) for el in self.params]}"

# gadget class that has associated a stack view and its effects (currently, operating on registers and/or stack popping)
# a gadget object can store two identical gadgets, but at different addresses
class ROP_gadget:

    # maximum gadget byte length to be searched for
    MAX_GADGET_BYTE_LEN = 30

    def __init__(self):

        self.stack = _64b_stack_view()
        self.effects: List[_effect] = []

        self.b: bytes = None

        # self.addrs - addresses of identical gadgets
        # used only at payload generation
        self.addrs: List[int] = []
    
        # self.eq_g - gadgets that differ by stack padding or nop instructions
        # used only at payload generation
        self.eq_g: List[ROP_gadget] = []

    def get_bytes(self):
        return self.b

    def get_stack_size(self):
        return len(self.stack.elements)

    def get_next_addr(self):
        return _64b_stack_view.stack_values[self.stack.elements[-1].info["id"]]

    def set_next_addr(self, addr: int):
        _64b_stack_view.stack_values[self.stack.elements[-1].info["id"]] = addr

    # by default, it contains the addresses without ASLR/PIE offsets
    def get_current_addrs(self):
        return [_64b_stack_view.stack_values[addr] for addr in self.addrs]

    def show(self, capstone_handle: Cs = None, show_addr = True, show_stack = True, output_handle = stdout):
        
        if len(self.addrs) == 0:
            print("(empty gadget)", file = output_handle)
            return

        if capstone_handle is None:
            capstone_handle = Cs(CS_ARCH_X86, CS_MODE_64)

        disas_instr_generator = capstone_handle.disasm(self.b, self.get_current_addrs()[0])
        for ins in disas_instr_generator:

            if show_addr is True:
                print(f"{hex(ins.address)}: {ins.mnemonic} {ins.op_str}", file = output_handle)
            else:
                print(f"{ins.mnemonic} {ins.op_str}", file = output_handle)

        if show_stack is True:

            _s = f"----- STACK ({self.get_stack_size()} ELEMENTS) -----"
            print(_s, file = output_handle)

            self._show_stack_values(output_handle)

            print("-" * len(_s), file = output_handle)

    def _show_stack_values(self, output_handle):

        for el in self.stack.elements:

            if el.type == "64b_stack_val":

                val = _64b_stack_view.stack_values[el.info['id']]
                if val is not None:
                    print(f"id {el.info['id']}: {hex(val)}", file = output_handle)
                else:
                    print(f"id {el.info['id']}: EMPTY", file = output_handle)
            else:
                print("====PAD====", file = output_handle)

    def add_current_addr(self, addr: int):

        new_addr_id = _64b_stack_view.get_elem_id()
        self.addrs.append(new_addr_id)
        _64b_stack_view.stack_values[new_addr_id] = addr

    # auxiliary internal method for duplication
    def _duplicate_stack(self, cpy: ROP_gadget | ROP_chain, copy_stack_associated_values):
        
        old_new_id: Dict[int, int] = {}
        def _get_new_id(old_id: int):
            
            if old_id in old_new_id.keys():
                return old_new_id[old_id]

            return None

        # recursive search for stack elements that need to be replaced
        def _recursive_replace(op_element: structured_element):
            
            if op_element.type == "64b_stack_val":
                op_element.info["id"] = _get_new_id(op_element.info["id"])

            elif op_element.is_op():
                
                if op_element.info["term_1"] is not None:
                    _recursive_replace(op_element.info["term_1"])

                if op_element.info["term_2"] is not None:
                    _recursive_replace(op_element.info["term_2"])

        for stack_elem in self.stack.elements:

            if stack_elem.type == "64b_stack_pad":
                cpy.stack.push(structured_element.instantiatestructured_element("64b_stack_pad"))

            elif stack_elem.type == "64b_stack_val":

                cpy_stack_elem = structured_element.instantiatestructured_element("64b_stack_val")

                # check whether the current id has already been replaced in a previous stack element instance
                cpy_id = _get_new_id(stack_elem.info["id"])
                if cpy_id is None:
                    
                    cpy_stack_elem.info["id"] = _64b_stack_view.get_elem_id()
                    old_new_id.update({stack_elem.info["id"]: cpy_stack_elem.info["id"]})

                    if copy_stack_associated_values is True:
                        _64b_stack_view.stack_values[cpy_stack_elem.info["id"]] = _64b_stack_view.stack_values[stack_elem.info["id"]]

                else:
                    cpy_stack_elem.info["id"] = cpy_id                    

                cpy.stack.push(cpy_stack_elem)

        cpy.effects = deepcopy(self.effects)
        for ef in cpy.effects:

            if ef.type == "LOAD_S":
                ef.params[0].info["id"] = _get_new_id(ef.params[0].info["id"])

            elif ef.type == "ARITH":
                _recursive_replace(ef.params[0])

        return cpy, old_new_id

    # a gadget has fixed stack element ids that are kept globally
    # so to use multiple times the same gadget,
    # a duplicate method is needed, that automatically 
    # makes a deep copy of the stack elements and ids, and also the effects
    # it returns the new copy and the old_new_id list
    # NOTE: if the old id had an associated value, it also copies it, if chosen so
    # NOTE: does NOT duplicate the elements from eq_g
    def duplicate(self, copy_stack_associated_values = True):

        cpy = ROP_gadget()

        cpy.b = self.b

        cpy.eq_g = self.eq_g.copy()
  
        cpy.addrs = self.addrs.copy()
        for i in range(len(cpy.addrs)):
            
            addr_val = _64b_stack_view.stack_values[cpy.addrs[i]]
            addr_id_cpy = _64b_stack_view.get_elem_id()
            _64b_stack_view.stack_values[addr_id_cpy] = addr_val            
            cpy.addrs[i] = addr_id_cpy

        return self._duplicate_stack(cpy, copy_stack_associated_values)
    
    # this method should ONLY be called when you DO NOT NEED THE GADGET ANYMORE
    # it clears the stack and removes the id s that are also present in the corresponding dictionary
    # so that no memory is leaked
    # NOTE: does not remove anything from eq_g
    def remove_stack_ids(self):
        
        self.b = None
        self.effects = None

        for addr_id in self.addrs:
            _64b_stack_view.stack_values.pop(addr_id, None)

        for stack_elem in self.stack.elements:
            if stack_elem.type == "64b_stack_val":
                _64b_stack_view.stack_values.pop(stack_elem.info["id"], None)   # if the key does not exist, None is returned

        self.stack = None

    # function to check whether the given registers remain unchanged or not
    def check_fixed_regs(self, fixed_reg_list: List[str]):

        for fixed_r in fixed_reg_list:
            for ef in self.effects:

                if ef.destination_element.info["reg_name"] == fixed_r: 

                    if ef.type in ["LOAD_CT", "MOV_RR", "LOAD_S"]:
                        return False

                    elif ef.type == "ARITH":
                        
                        nop_mov = _effect.make_mov_rr_effect(fixed_r, fixed_r)
                        if _effect._match_arith(nop_mov, ef) is False:
                            return False

        return True

    # auxiliary internal method for joining gadgets / chains
    @staticmethod
    def _join_ef_stk(fst: ROP_gadget | ROP_chain, snd: ROP_gadget | ROP_chain):

        fst_cpy, _ = fst.duplicate(copy_stack_associated_values=True)
        snd_cpy, _ = snd.duplicate(copy_stack_associated_values=True)

        joined_effects = _effect.join_effects(fst_cpy.effects, snd_cpy.effects)
        joined_stack = _64b_stack_view.join_stacks(fst_cpy.stack, snd_cpy.stack)

        res_chain = ROP_chain()

        res_chain.stack = joined_stack
        res_chain.effects = joined_effects

        return res_chain, fst_cpy, snd_cpy

    def join(self, snd: ROP_gadget | ROP_chain) -> ROP_chain:

        fst_cpy: ROP_gadget
        res_chain, fst_cpy, snd_cpy = ROP_gadget._join_ef_stk(self, snd)

        if type(snd) == ROP_chain:

            res_chain.b = [fst_cpy.b] + snd_cpy.b
            res_chain.gadgets_stackview_offset = [0] + [off + fst_cpy.get_stack_size() for off in snd_cpy.gadgets_stackview_offset]
            res_chain.addrs = [fst_cpy.addrs] + snd_cpy.addrs
            res_chain.eq_g = [fst_cpy.eq_g] + snd_cpy.eq_g

        else:

            res_chain.b = [fst_cpy.b, snd_cpy.b]
            res_chain.gadgets_stackview_offset = [0, fst_cpy.get_stack_size()]
            res_chain.addrs = [fst_cpy.addrs, snd_cpy.addrs]
            res_chain.eq_g = [fst_cpy.eq_g, snd_cpy.eq_g]

        return res_chain

    # mostly for debugging purposes
    def __str__(self):
        return f"ROP gadget with stack {self.stack}, addresses are {self.get_current_addrs()}, effects {[str(ef) for ef in self.effects]}"

# class to store rop chains, 
# in almost the same way as rop gadgets
class ROP_chain(ROP_gadget):

    def __init__(self):

        self.stack: _64b_stack_view = _64b_stack_view()
        self.effects: List[_effect] = []

        self.b: List[bytes] = []

        self.addrs: List[List[int]] = []
        self.eq_g: List[List[ROP_gadget]] = []

        # self.gadgets_stackview_offset - stack offset for each gadget
        self.gadgets_stackview_offset: List[int] = []

    # converts a gadget to a chain with only one gadget
    # does NOT copy
    @staticmethod
    def convert(gadget: ROP_gadget) -> ROP_chain:

        chain = ROP_chain()

        chain.effects = gadget.effects
        chain.stack = gadget.stack

        chain.b = [gadget.b]
        chain.gadgets_stackview_offset = [0]
        chain.addrs = [gadget.addrs]
        chain.eq_g = [gadget.eq_g]

        return chain

    def get_bytes(self):
        
        acc_b = b''
        for b_ in self.b:
            acc_b += b_

        return acc_b

    def get_gadget_cnt(self):
        return len(self.gadgets_stackview_offset)

    # generator instead of function as in ROP_gadget class
    def get_current_addrs(self): 
        for i in range(self.get_gadget_cnt()):
            yield self.gadgets_stackview_offset[i], [_64b_stack_view.stack_values[addr_id] for addr_id in self.addrs[i]]

    def show(self, capstone_handle: Cs = None, show_addr = True, show_stack = True, output_handle = stdout):
        
        if len(self.addrs) == 0:
            print("(empty chain)", file = output_handle)
            return

        if capstone_handle is None:
            capstone_handle = Cs(CS_ARCH_X86, CS_MODE_64)

        _i = 0
        for _, addrs in self.get_current_addrs():

            disas_instr_generator = capstone_handle.disasm(self.b[_i], addrs[0])
            for ins in disas_instr_generator:

                if show_addr is True:
                    print(f"{hex(ins.address)}: {ins.mnemonic} {ins.op_str}")
                else:
                    print(f"{ins.mnemonic} {ins.op_str}")

            _i += 1

        if show_stack is True:

            _s = f"----- STACK ({self.get_stack_size()} ELEMENTS) -----"
            print(_s, file = output_handle)

            self._show_stack_values(output_handle)
            
            print("-" * len(_s), file = output_handle)

    def add_current_addr(self, addr: int, idx: int):
        
        new_addr_id = _64b_stack_view.get_elem_id()
        self.addrs[idx].append(new_addr_id)
        _64b_stack_view.stack_values[new_addr_id] = addr

    def duplicate(self, copy_stack_associated_values = True):

        cpy = ROP_chain()

        cpy.b = self.b.copy()
        cpy.gadgets_stackview_offset = self.gadgets_stackview_offset.copy()
        cpy.eq_g = [l.copy() for l in self.eq_g]

        cpy.addrs = deepcopy(self.addrs)
        for i in range(self.get_gadget_cnt()):
            for j in range(len(cpy.addrs[i])):
            
                addr_val = _64b_stack_view.stack_values[cpy.addrs[i][j]]
                addr_id_cpy = _64b_stack_view.get_elem_id()
                _64b_stack_view.stack_values[addr_id_cpy] = addr_val            
                cpy.addrs[i][j] = addr_id_cpy

        return self._duplicate_stack(cpy, copy_stack_associated_values)
    
    def remove_stack_ids(self):
        
        for i in range(self.get_gadget_cnt()):
            for addr in self.addrs[i]:
                _64b_stack_view.stack_values.pop(addr, None)

        for stack_elem in self.stack.elements:
            if stack_elem.type == "64b_stack_val":
                _64b_stack_view.stack_values.pop(stack_elem.info["id"], None)   # if the key does not exist, None is returned

        self.b = None
        self.effects = None
        self.gadgets_stackview_offset = None
        self.stack = None

    def join(self, snd: ROP_gadget | ROP_chain) -> ROP_chain:

        fst_cpy: ROP_chain
        res_chain, fst_cpy, snd_cpy = ROP_gadget._join_ef_stk(self, snd)
        
        if type(snd) == ROP_chain:

            res_chain.b = fst_cpy.b + snd_cpy.b
            res_chain.gadgets_stackview_offset = fst_cpy.gadgets_stackview_offset
            res_chain.gadgets_stackview_offset += [off + fst_cpy.get_stack_size() for off in snd_cpy.gadgets_stackview_offset]
            res_chain.addrs = fst_cpy.addrs + snd_cpy.addrs
            res_chain.eq_g = fst_cpy.eq_g + snd_cpy.eq_g

        else:

            res_chain.b = fst_cpy.b
            res_chain.b.append(snd_cpy.b)
            res_chain.gadgets_stackview_offset = fst_cpy.gadgets_stackview_offset
            res_chain.gadgets_stackview_offset.append(fst_cpy.get_stack_size())
            res_chain.addrs = fst_cpy.addrs
            res_chain.addrs.append(snd_cpy.addrs)
            res_chain.eq_g = fst_cpy.eq_g
            res_chain.eq_g.append(snd_cpy.eq_g)

        return res_chain
    
    # method responsible for building payload for a single chain
    # addr_offset - to be added to (all) original addresses from this chain (eg. because of ASLR)
    # forbidden_bytes - list of forbidden bytes, that can force replacing current gadgets with alternatives
    # NOTE: payload can only be built from a chain, and not a gadget (for implementation simplicity)
    #       if a gadget is needed, it can be converted to a chain and then the payload can be built
    # NOTE: gadgets from eq_g are expected to be sorted by stack size
    def _make_payload(self, max_stack_size: int, forbidden_bytes: List[bytes] = [], 
                        addr_offset: int = 0, pad_byte = b'A') -> bytes:
        
        # check if bytes contain any forbidden byte
        def _check_bytes(to_check: bytes):

            for b in to_check:
                if b in forbidden_bytes:
                    return False

            return True

        payload = b''

        for i in range(self.get_gadget_cnt()):

            found = False

            stack_offset = self.gadgets_stackview_offset[i]

            stack_end = 0
            if i == self.get_gadget_cnt() - 1:
                stack_end = len(self.stack.elements)
            else:
                stack_end = self.gadgets_stackview_offset[i + 1]

            stacks = [self.stack.elements[stack_offset: stack_end]] + [g.stack.elements for g in self.eq_g[i]]
            addrs = [self.addrs[i]] + [g.addrs for g in self.eq_g[i]]

            for j in range(len(stacks)):
                if len(stacks[j]) <= max_stack_size:

                    for k in range(len(addrs[j])):
                        
                        b_addr = to_bytes(_64b_stack_view.stack_values[addrs[j][k]] + addr_offset)

                        if _check_bytes(b_addr) is True:

                            payload += b_addr
                            
                            found = True
                            for el in stacks[j][:-1]:

                                if el.type == "64b_stack_pad":
                                    payload += pad_byte * 8

                                elif el.type == "64b_stack_val":
                                    
                                    val = _64b_stack_view.stack_values[el.info["id"]]

                                    if val is None:
                                        payload += pad_byte * 8
                                        continue
                                
                                    b = to_bytes(val)
                                    if _check_bytes(b) is True:
                                        payload += b
                                    else:
                                        return None     # stacks differ only by padding, so if a forbidden byte is found, 
                                                        # it is clear that there is no way of constructing the payload

                            max_stack_size -= len(stacks[j])
                            
                            if found is True:
                                break

                if found is True:
                    break

            if found is False:
                return None

        if len(payload) % 8 != 0:
            raise RuntimeError(f"Payload is not 8-byte aligned (length: {len(payload)})")
                        
        return payload

    # mostly for debugging purposes
    def __str__(self):
        return f"ROP chain with stack {self.stack}, addresses are {'TODO'}, effects {[str(ef) for ef in self.effects]}"

class ROP_searcher_ARM64:

    def __init__(self, filepath: str):

        def _find_endpoints_offsets():

            endpoints_offsets = []
            
            for i in range(len(self.exec_bytes)):
                
                xc_offset, xc = self.exec_bytes[i]
                for ib in range(len(xc)):

                    if xc[ib: ib + 1] in Platform.ARM64.ENDPOINTS.keys():
                        endpoints_offsets.append((i, xc_offset + ib))
            
            return endpoints_offsets

        def _find_ret_offsets():

            ret_offsets = []

            for i in range(len(self.exec_bytes)):
                
                xc_offset, xc = self.exec_bytes[i]
                for ib in range(len(xc)):

                    if xc[ib: ib + 1] == b'\xc3':
                        ret_offsets.append((i, xc_offset + ib))

            return ret_offsets

        self.exec_bytes = Elf_util(filepath).load_x_bytes()
        self.capstone = Cs(CS_ARCH_ARM64, CS_MODE_64)

        # constant, can be changed, but 3 is the maximum recommended value
        self.BRUTEFORCE_DEPTH = 2

        self.ret_offsets: List[Tuple[int, int]] = _find_ret_offsets()
        self.endpoints_offsets: List[Tuple[int, int]] = _find_endpoints_offsets()

        self.gadgets: Set[ROP_gadget] = set()
        # retonly gadget does not make sense here
        self.jumponly_gadget = None # TODO
        self.effects_to_gadgets: Dict[str, Dict[str, List[ROP_gadget]]] = {ef_t: {reg: [] for reg in Platform.ARM64.SUPPORTED_REGS} for ef_t in ["LOAD_S", "LOAD_CT", "MOV_RR", "ARITH", "JUMP"]}

# auxiliary class that helps in building the payload
# TODO
class ROP_payload:

    class _alignment:

        # default alignment at the beginning of a payload
        DEFAULT_ALIGNMENT = 8

        SUPPORTED_ALIGNMENTS = [8, 16, 32, 64]
        
        def __init__(self, bound: int, is_aligned = False):

            self.bound = bound
            self.is_aligned = is_aligned

    class _addr:

        def __init__(self, addr: int):
            self.addr = addr

    def __init__(self, rop_searcher, output_handle = stdout):

        self.logger = Logger(session_name = "PAYLOAD BUILDER", output_handle = output_handle)
        self.rop_searcher: ROP_searcher_ARM64 = rop_searcher
        
        self.pad_byte = b'A'
        self.max_b_size = 160
        self.forbidden_bytes: List[bytes] = []

        self._raw_payload: List[ROP_payload._addr | bytes | ROP_payload._alignment | ROP_chain] = []

    def set_max_size(self, max_byte_size: int) -> None:
        self.max_b_size = max_byte_size

    def add_chain(self, ch: ROP_chain) -> None:
        self._raw_payload.append(ch)

    def add_bytes(self, b: bytes) -> None:
        self._raw_payload.append(b)

    def add_padding(self, pad_len: int)-> None:
        self._raw_payload.append(self.pad_byte * pad_len)

    def add_addr(self, addr: int) -> None:
        self._raw_payload.append(ROP_payload._addr(addr))

    # it marks that the stack is aligned to the specified boundary
    # thus ignoring the (deduced) alignment up to this point
    def is_aligned_as(self, bound: int = 8) -> None:

        if bound not in ROP_payload._alignment.SUPPORTED_ALIGNMENTS:
            raise RuntimeError(f"Requested stack alignment of {bound} bytes is not supported")

        self._raw_payload.append(ROP_payload._alignment(bound, is_aligned = True))

    # when building payload
    # this statement is equivalent to adding return-only gadgets
    def align_as(self, bound: int = 8) -> None:

        if bound not in ROP_payload._alignment.SUPPORTED_ALIGNMENTS:
            raise RuntimeError(f"Requested stack alignment of {bound} bytes is not supported")

        self._raw_payload.append(ROP_payload._alignment(bound, is_aligned = False))

    # remove the last added element
    def remove_last_added(self) -> None:

        if len(self._raw_payload) > 0:
            self._raw_payload.pop()

    # method responsible for building final payload, in bytes
    # NOTE: addr offset does NOT apply to given "naked" addresses,
    #       only to chain(gadget) addresses (and ret-only alignment gadgets)
    def build(self, chain_addr_offset: int = 0) -> bytes:

        _t = self.logger.log_info("Building payload...", start_timer = True)
        
        payload = b''

        # check if bytes contain any forbidden byte
        def _check_bytes(to_check: bytes):

            for b in to_check:
                if b in self.forbidden_bytes:
                    return False

            return True

        # returns the (biggest) alignment
        def _check_alignment(to_check_len: int):
            
            for al in ROP_payload._alignment.SUPPORTED_ALIGNMENTS[::-1]:
                if to_check_len % al == 0:
                    return al

            return 0

        # searches for return address 
        # that does not contain forbidden bytes
        _cached_ret_addr = None
        def _get_ret_addr():

            nonlocal _cached_ret_addr
            
            if _cached_ret_addr is None:
                for ret_addr in self.rop_searcher.retonly_gadget.get_current_addrs():

                    b_ret_addr = to_bytes(ret_addr + chain_addr_offset)
                    if _check_bytes(b_ret_addr) is True:

                        _cached_ret_addr = b_ret_addr
                        break

            return _cached_ret_addr

        # preprocess the payload:
        #   * join adjacent chains
        def _preprocess():

            preproc_payload = [self._raw_payload[0]]

            for i in range(1, len(self._raw_payload)):

                if (type(preproc_payload[-1]) != ROP_chain) or (type(self._raw_payload[i]) != ROP_chain):
                    preproc_payload.append(self._raw_payload[i])

                elif (type(preproc_payload[-1]) == ROP_chain) and (type(self._raw_payload[i]) == ROP_chain):

                    aux_ch = preproc_payload[-1].join(self._raw_payload[i])
                    preproc_payload[-1].remove_stack_ids()
                    preproc_payload[-1] = aux_ch

                else:
                    raise RuntimeError(f"Encountered element of unknown type {type(self._raw_payload[i])} while trying to make payload")

            return preproc_payload

        preproc_payload = _preprocess()

        b_mss = self.max_b_size
        alignment_aux = ROP_payload._alignment.DEFAULT_ALIGNMENT
        
        for item in preproc_payload:

            if type(item) == bytes:

                if _check_bytes(item) is True:

                    payload += item
                    b_mss -= len(item)

                    if b_mss < 0:
                        self.logger.log_warning(f"Maximum payload byte size surpassed by (at least) {-b_mss} bytes", end_timer = _t)
                        return None

                    alignment_aux += len(item)
                    alignment_aux %= ROP_payload._alignment.SUPPORTED_ALIGNMENTS[-1]

                else:
                    self.logger.log_warning("Some given bytes for building payload contains forbidden bytes", end_timer = _t)
                    return None

            elif type(item) == ROP_payload._addr:

                b_item = to_bytes(item.addr)

                if _check_bytes(b_item) is True:

                    payload += b_item
                    b_mss -= 8

                    if b_mss < 0:
                        self.logger.log_warning(f"Maximum payload byte size surpassed by (at least) {-b_mss} bytes", end_timer = _t)
                        return None

                    alignment_aux += 8
                    alignment_aux %= ROP_payload._alignment.SUPPORTED_ALIGNMENTS[-1]

                else:
                    self.logger.log_warning("A given address for building payload contains forbidden bytes", end_timer = _t)
                    return None

            elif type(item) == ROP_payload._alignment:

                if item.is_aligned is False:
                    
                    current_alignment = _check_alignment(alignment_aux)
                    while current_alignment < item.bound:

                        b_ret_addr = _get_ret_addr()
                        if b_ret_addr is None:

                            self.logger.log_warning("Could not find return address for alignment that does not contain forbidden bytes", end_timer = _t)
                            return None

                        payload += b_ret_addr
                        b_mss -= 8

                        if b_mss < 0:
                            self.logger.log_warning(f"Maximum payload byte size surpassed by (at least) {-b_mss} bytes", end_timer = _t)
                            return None

                        alignment_aux += 8
                        alignment_aux %= ROP_payload._alignment.SUPPORTED_ALIGNMENTS[-1]
                        current_alignment = _check_alignment(alignment_aux)

                else:
                    alignment_aux = item.bound

            elif type(item) == ROP_chain:

                if b_mss < 8:
                    self.logger.log_warning(f"Not enough payload length for constructing payload for a given chain: only {b_mss} bytes left", end_timer = _t)
                
                payload_ = item._make_payload(max_stack_size = b_mss // 8, forbidden_bytes = self.forbidden_bytes, 
                                                addr_offset = chain_addr_offset, pad_byte = self.pad_byte)
                if payload_ is not None:

                    payload += payload_
                    b_mss -= len(payload_)

                    if b_mss < 0:
                        self.logger.log_warning(f"Maximum payload byte size surpassed by (at least) {-b_mss} bytes", end_timer = _t)
                        return None

                    alignment_aux += len(payload_)
                    alignment_aux %= ROP_payload._alignment.SUPPORTED_ALIGNMENTS[-1]

                else:
                    self.logger.log_warning("Creating payload for a given rop chain failed", end_timer = _t)
                    return None

        self.logger.log_success("Successfully built the payload", end_timer = _t)

        return payload

